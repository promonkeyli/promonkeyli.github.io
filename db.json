{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/svg/front-standard.svg","path":"images/svg/front-standard.svg","modified":0,"renderable":0},{"_id":"source/images/svg/swagger.svg","path":"images/svg/swagger.svg","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fe621a835bbb76d9a9ebb883695aa974b750d5bc","modified":1719127218562},{"_id":"source/_posts/docker中nginx服务器ssl证书安装部署.md","hash":"cc35134ebcb24577df9f4924012ffdbeb53b1fd6","modified":1717475683814},{"_id":"source/_posts/go项目目录结构规划.md","hash":"89c31a334d4e0a131ff59898249ac2fa1e8792bb","modified":1718440271020},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1717825090599},{"_id":"source/_posts/hexo-插件开发流程以及推送至hexo官方列表.md","hash":"497c7eae443df49e339f140e159b5f21d7213cea","modified":1719127668223},{"_id":"source/_posts/editorconfig文件详解.md","hash":"52ccdde86177a40fc266c5be2edf94afaeea3fa5","modified":1717826053537},{"_id":"source/_posts/css opacity透明度叠加色差问题.md","hash":"3dd221ead604b87c426d580b8d95da701567194b","modified":1719014451305},{"_id":"source/_posts/go-gin框架接入swagger，next项目自动生成接口文档.md","hash":"e2f8de6fbd7e31546574ace9f1f6030a172397b4","modified":1718539570844},{"_id":"source/_posts/npm-镜像源地址（官方-淘宝）.md","hash":"e22f117dd48bdb7c43a07e9b04d56f0ad8136f71","modified":1717811498315},{"_id":"source/_posts/使用yalc作为你的本地依赖管理工具.md","hash":"f041e1cd2b0bcc7463f066e98e8ea0ce2508a089","modified":1719127897843},{"_id":"source/_posts/linux安装docker.md","hash":"4715c115b0b122050b0598f6de5410bc245bbb87","modified":1717049774735},{"_id":"source/_posts/腾讯云ubuntu服务器root用户初始化.md","hash":"35a337bf4a3c019ed09f86739adc4048fa8ab6f7","modified":1717051997245},{"_id":"source/_posts/go语言中的导入与导出.md","hash":"3ec7eca36165b0430bda708d1a70801c64a9254e","modified":1717996857097},{"_id":"source/_posts/前端项目开发格式规范（husky-lint-staged-biome-commitlint-commizen-cz-conventional-changelog）.md","hash":"4e58833b18547bc8067c4cdd6d7189527cb36bad","modified":1718264887480},{"_id":"source/tags/index.md","hash":"93141f04974e6030e6d4e89279de539db8e1239f","modified":1719030554861},{"_id":"source/archives/index.md","hash":"3afda3d033fb1d686739170d885aa9818ede7503","modified":1717049476709},{"_id":"source/images/avatar.jpg","hash":"bec5122f955c605abb609674c13b4056257559c9","modified":1718987228000},{"_id":"source/images/.DS_Store","hash":"4d96c4a12f3409db7042813540a0cd9bb7263c5f","modified":1718536428944},{"_id":"source/categories/index.md","hash":"153729545feb0864b83b9546e8921dfaba8e9056","modified":1719030607441},{"_id":"source/about/index.md","hash":"b918d12abd8e6bf7d286a6fbd364c07ce79a349e","modified":1719030884248},{"_id":"source/images/svg/swagger.svg","hash":"4af3cf8e5f4cae72ced4ee24a4f7e6abb558896b","modified":1718536256171},{"_id":"source/images/svg/front-standard.svg","hash":"2020acad847af825195a48f980e460c6a38f0f66","modified":1718265580921},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"82dc85404bb716360c136059f8b4ead67f46549c","modified":1717049564976},{"_id":"node_modules/hexo-theme-next/package.json","hash":"655accf88e80dfdd525042da1d65114b47dcb52a","modified":1717049564938},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1717049564940},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1717049564939},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1717049564939},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"8cfc97916efdc7cb9acfbe3a653e943a97e54de0","modified":1717049564975},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1717049564975},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1717049564940},{"_id":"node_modules/hexo-theme-next/README.md","hash":"20d3aab17b7d9b7ab537800a5ee932af8438664a","modified":1717049564941},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1717049564976},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1717049564976},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1717049564977},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1717049564977},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1717049564977},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1717049564978},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1717049564978},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1717049564977},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1717049564978},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1717049564977},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1717049564979},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1717049564979},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1717049564978},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1717049564978},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1717049564979},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1717049564980},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1717049564980},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1717049564979},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1717049564980},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1717049564979},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1717049564981},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1717049564980},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1717049564981},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1717049564981},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1717049564941},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1717049564943},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1717049564947},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1717049564942},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1717049564951},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1717049564955},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"0be2d7a75ffc3d9a963cf89a13bd1b50579f8304","modified":1717049564940},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1717049564939},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ce6bd4054653a4066b19869819a17b568eeee915","modified":1717049564933},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1717049564934},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1717049564881},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1717049564934},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1717049564940},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1717049564875},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1717049564934},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1717049564876},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"8d205b7ffdaa9a89bb8f75410507ee1bab230f55","modified":1717049564904},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1717049564906},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1717049564876},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1717049564929},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1717049564931},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1717049564934},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1717049564930},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1717049564935},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1717049564938},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1717049564978},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1717049564938},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1717049564936},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1717049564906},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1717049564879},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1717049564932},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1717049564888},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1717049564935},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1717049564933},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"287f57dbdfd23341800a0ff310f3474272b9dcc8","modified":1717049564940},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1717049564952},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1717049564953},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1717049564954},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1717049564953},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1717049564944},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1717049564948},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1717049564951},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1717049564931},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1717049564941},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1717049564945},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1717049564950},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1717049564954},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1717049564956},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1717049564956},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1717049564944},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1717049564947},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"7ed1fa981bf4765af092d7b178acbdeeb95d5b20","modified":1717049564946},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1717049564957},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1717049564956},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1717049564957},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1717049564957},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1717049564873},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1717049564975},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"bbeae369eaba9a2565fc359a5b79184d21bdd167","modified":1717049564959},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1717049564875},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1717049564975},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1717049564877},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1717049564879},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1717049564933},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1717049564878},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"adc751f9b63b7a6b4d381506d35a1b3ff4de891f","modified":1717049564935},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"8e587c086e3cf8687108fbb3241fe1534c3df463","modified":1717049564932},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"b3289010a0cb52c525b1395db72bd463424f2f48","modified":1717049564936},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1717049564878},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1717049564907},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1717049564937},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1717049564938},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8300553bf2a1c4bfaec76f2da56465016e9d8058","modified":1717049564905},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1717049564876},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1717049564933},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1717049564879},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1717049564880},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1717049564878},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1717049564889},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1717049564880},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1717049564924},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1717049564930},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1717049564937},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1717049564946},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1717049564969},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1717049564936},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1717049564942},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1717049564946},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1717049564946},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"f92420649b150703469bba41cbd5c72768beed88","modified":1717049564937},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1717049564954},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1717049564967},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1717049564942},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1717049564943},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1717049564954},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1717049564949},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1717049564950},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1717049564955},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1717049564952},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1717049564954},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1717049564952},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1717049564953},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1717049564953},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1717049564955},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1717049564953},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1717049564943},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1717049564941},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1717049564949},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1717049564942},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1717049564944},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1717049564952},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1717049564945},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1717049564946},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1717049564945},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1717049564946},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1717049564949},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1717049564950},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1717049564952},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1717049564955},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1717049564947},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1717049564948},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1717049564949},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1717049564950},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1717049564951},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1717049564956},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1717049564943},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1717049564944},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1717049564945},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1717049564947},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1717049564944},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1717049564955},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1717049564948},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1717049564942},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1717049564951},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1717049564945},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1717049564948},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1717049564949},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1717049564947},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1717049564968},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1717049564963},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1717049564968},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1717049564969},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1717049564873},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1717049564934},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1717049564941},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1717049564935},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1717049564961},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1717049564882},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1717049564964},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1717049564968},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1717049564966},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1717049564957},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1717049564959},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1717049564958},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"8b4100f316e9924f2410802615107130588d721e","modified":1717049564961},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1717049564960},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1717049564960},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1717049564967},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1717049564971},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1717049564965},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1717049564963},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1717049564966},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1717049564961},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1717049564969},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1717049564957},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1717049564958},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1717049564962},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1717049564958},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1717049564958},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1717049564968},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1717049564960},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1717049564958},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1717049564974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"d537c748914ad395319f9cfc91cd5ba96db57e8c","modified":1717049564959},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1717049564966},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"37be10c413438060fc76ed31ae74d4300c38c5eb","modified":1717049564974},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"7ba406f560e3a6646b9254bb670fda696889e1e6","modified":1717049564960},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1717049564961},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1717049564967},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1717049564880},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1717049564876},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1717049564881},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1717049564877},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1717049564892},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1717049564874},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1717049564903},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1717049564930},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1717049564937},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1717049564929},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1717049564931},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1717049564931},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1717049564929},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1717049564905},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1717049564882},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1717049564930},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1717049564930},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1717049564937},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1717049564932},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1717049564935},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1717049564938},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1717049564963},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1717049564962},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1717049564971},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1717049564974},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1717049564964},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1717049564969},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1717049564964},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1717049564970},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1717049564970},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1717049564970},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1717049564970},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1717049564874},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1717049564970},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1717049564970},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1717049564971},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1717049564971},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1717049564965},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1717049564965},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1717049564963},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1717049564964},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1717049564967},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1717049564974},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1717049564962},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1717049564964},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1717049564965},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1717049564968},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"7c203ec68c0f54429caf35803dbac85b18540278","modified":1717049564966},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1717049564971},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1717049564972},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1717049564972},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1717049564972},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1717049564972},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1717049564973},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1717049564972},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1717049564972},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1717049564973},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1717049564973},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1717049564973},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1717049564963},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1717049564966},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1717049564962},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1717049564963},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1717049564964},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1717049564966},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1717049564967},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1717049564967},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1717049564968},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1717049564969},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1717049564969},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1717049564974},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1717049564975},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1717049564973},{"_id":"public/search.xml","hash":"47c5ff90f1c98fac427ac3e2666bc0b6576a045c","modified":1719127925891},{"_id":"public/tags/index.html","hash":"c252c1dcb543111793be10c0a1fedf283005c480","modified":1719127925891},{"_id":"public/categories/index.html","hash":"9a5d213cae509b50aaa05f8b0da9e6349d5a0dfe","modified":1719127925891},{"_id":"public/about/index.html","hash":"6af918a9550ac771e296f796b0c47f78292df9fa","modified":1719127925891},{"_id":"public/categories/css/index.html","hash":"114d0d5db7566a3479e96c527b98b8345567b227","modified":1719127925891},{"_id":"public/categories/linux/index.html","hash":"08f1adae87a96402b192e60c12c34164eb51f0ba","modified":1719127925891},{"_id":"public/categories/hexo/index.html","hash":"1ac83ae2c6ab56f5dd6ddb1056741ca8b1a52c46","modified":1719127925891},{"_id":"public/categories/go/index.html","hash":"6c19bb4168bf5f70f0ec8069483e45a665402e44","modified":1719127925891},{"_id":"public/categories/tools/index.html","hash":"03b0dcd031a27926b77afb1d4e1432fc15381be3","modified":1719127925891},{"_id":"public/categories/go/next/index.html","hash":"4b4743cf40a8126e7ff59a5fa0fa216aebfdc55c","modified":1719127925891},{"_id":"public/categories/docker/index.html","hash":"2f6ab37ff25ce9e07a02ad2f5bf43f32e8488d6b","modified":1719127925891},{"_id":"public/categories/npm/index.html","hash":"65d795bea5e1c17f1dad4f483b4f87b248564f89","modified":1719127925891},{"_id":"public/categories/frontend-standard/index.html","hash":"a9c021aa831d2dabf71f73b4dad354474dcf847d","modified":1719127925891},{"_id":"public/tags/css/index.html","hash":"f1dc67e1ae4e965c6bbb4c0515dfa20c194ea4d3","modified":1719127925891},{"_id":"public/tags/nginx/index.html","hash":"81165dad369212b924792d97f9128422b1d920ea","modified":1719127925891},{"_id":"public/tags/docker/index.html","hash":"613193fefb9c5c0bc4c931a8e84f3a7aca3a265d","modified":1719127925891},{"_id":"public/tags/go/index.html","hash":"1a4272284762c3a0b6e49de8132a2f077cbe145b","modified":1719127925891},{"_id":"public/tags/gin/index.html","hash":"abcc76086e3233051671b4f27b43e3c6b9987320","modified":1719127925891},{"_id":"public/tags/swagger/index.html","hash":"2259e843129f446c02b3cd92c1ae4b40024b7003","modified":1719127925891},{"_id":"public/tags/openapi-generator/index.html","hash":"89535ddbf650d6d6cfcf30fdb6cbbf4b9eee2922","modified":1719127925891},{"_id":"public/tags/next/index.html","hash":"97a4ecc2197eb49fcc0a90484779fa6cfe35440d","modified":1719127925891},{"_id":"public/tags/hexo/index.html","hash":"f3b7254b79bb2bba2a4ee3a3317e6ce509ba4d48","modified":1719127925891},{"_id":"public/tags/plugins/index.html","hash":"a65d210c4371ed073a7275bfad0e6df0bb501330","modified":1719127925891},{"_id":"public/tags/editor/index.html","hash":"11b5c61296f7a6e57896088d24ff1d7dd3177439","modified":1719127925891},{"_id":"public/tags/linux/index.html","hash":"6303e15c453c5c0972c37d0edf89573cb492d374","modified":1719127925891},{"_id":"public/tags/ubuntu/index.html","hash":"cb2fb2935bcb4629ae0aac22981214b3bb74e949","modified":1719127925891},{"_id":"public/tags/yalc/index.html","hash":"a56106cba5485dc510cdee1412f239432bd08a65","modified":1719127925891},{"_id":"public/tags/biome/index.html","hash":"0641751a0bef3af802d45bcb40e3bbcf8afc6dc6","modified":1719127925891},{"_id":"public/tags/lint-staged/index.html","hash":"7761a96efabc54a3beb3cb18ae39686ad6d75a0a","modified":1719127925891},{"_id":"public/tags/npm/index.html","hash":"dc53a68cf2e88b090cef27881d9cad5503c8590d","modified":1719127925891},{"_id":"public/tags/commitlint/index.html","hash":"eabcc9ca9b72c5e346157bfd32bd04d4ccfee808","modified":1719127925891},{"_id":"public/tags/husky/index.html","hash":"62ee193aa456e0dbf2b56e4ded3efd98ef88625b","modified":1719127925891},{"_id":"public/tags/commizen/index.html","hash":"b5ab73e2a5e3928b77ea25c4208e2a7cc01ded4a","modified":1719127925891},{"_id":"public/tags/cz-conventional-changelog/index.html","hash":"a356c111200467ddb6954e9f9a9ad0fb7638b4ba","modified":1719127925891},{"_id":"public/archives/page/2/index.html","hash":"b76d1679501e6493ce95a78abd195cd8b95f31a5","modified":1719127925891},{"_id":"public/archives/2024/page/2/index.html","hash":"9e058284c882fdf0e7ffd6f5a03c58c8ea13c2ce","modified":1719127925891},{"_id":"public/archives/index.html","hash":"d7dae00274f930de2fd01941f1a03aad01a96960","modified":1719127925891},{"_id":"public/2024/06/23/使用yalc作为你的本地依赖管理工具/index.html","hash":"7c100fcd2e154dea7bded423bd6acd9bd41613e2","modified":1719127925891},{"_id":"public/2024/06/23/hexo-插件开发流程以及推送至hexo官方列表/index.html","hash":"56f8a37d8b2a5f4cad45f97165d46ca23524e4d1","modified":1719127925891},{"_id":"public/2024/06/16/go-gin框架接入swagger，next项目自动生成接口文档/index.html","hash":"0cead425e45b77a59b8b316033e118a67acbc30d","modified":1719127925891},{"_id":"public/2024/06/21/css opacity透明度叠加色差问题/index.html","hash":"adf2ab305b000f1d1adc3b533e258fdb9e4e0c94","modified":1719127925891},{"_id":"public/2024/06/15/go项目目录结构规划/index.html","hash":"5dc050f42ebb34fc2d05675ecea5acec23554077","modified":1719127925891},{"_id":"public/2024/06/13/前端项目开发格式规范（husky-lint-staged-biome-commitlint-commizen-cz-conventional-changelog）/index.html","hash":"a0f9fe81ecf394318786bdfbab172b73cb0637f9","modified":1719127925891},{"_id":"public/2024/06/10/go语言中的导入与导出/index.html","hash":"2bd57fd1915a85a7932efa815a948577a10207d4","modified":1719127925891},{"_id":"public/2024/06/08/editorconfig文件详解/index.html","hash":"ba1b05504eea0e1556f45d0ab919da972cc28d79","modified":1719127925891},{"_id":"public/2024/06/08/npm-镜像源地址（官方-淘宝）/index.html","hash":"cbc3a8d7c14a7d99fddaa322b6d71a5ee5988a25","modified":1719127925891},{"_id":"public/2024/06/04/docker中nginx服务器ssl证书安装部署/index.html","hash":"75a3b79253765663111ee6717a58bc0b1b23aa02","modified":1719127925891},{"_id":"public/2024/05/30/腾讯云ubuntu服务器root用户初始化/index.html","hash":"c99f7ef97fa3a0416f127624607fee69d8b96594","modified":1719127925891},{"_id":"public/2024/05/24/linux安装docker/index.html","hash":"2a1d9340733b4f6ee1d0222c36977205ffeaff7d","modified":1719127925891},{"_id":"public/archives/2024/index.html","hash":"f010e6f588a2e3fa208e91aea2180adcc775b926","modified":1719127925891},{"_id":"public/archives/2024/05/index.html","hash":"cd73018bd119d456935d2d2b102ca21f2b6e0efd","modified":1719127925891},{"_id":"public/archives/2024/06/index.html","hash":"d8c16d32f7f3443d151145f6ae88b1483bcc6c84","modified":1719127925891},{"_id":"public/page/2/index.html","hash":"c1afd12a493980552648bbebfaf380090cf8d1cc","modified":1719127925891},{"_id":"public/index.html","hash":"edf2212113d92e4dec703311f62bff6bf164932e","modified":1719127925891},{"_id":"public/images/avatar.jpg","hash":"bec5122f955c605abb609674c13b4056257559c9","modified":1719127925891},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1719127925891},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1719127925891},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1719127925891},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1719127925891},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1719127925891},{"_id":"public/images/svg/swagger.svg","hash":"4af3cf8e5f4cae72ced4ee24a4f7e6abb558896b","modified":1719127925891},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1719127925891},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1719127925891},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1719127925891},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1719127925891},{"_id":"public/js/sidebar.js","hash":"b3289010a0cb52c525b1395db72bd463424f2f48","modified":1719127925891},{"_id":"public/js/motion.js","hash":"8e587c086e3cf8687108fbb3241fe1534c3df463","modified":1719127925891},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1719127925891},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1719127925891},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1719127925891},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1719127925891},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1719127925891},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1719127925891},{"_id":"public/css/main.css","hash":"f1f8e5f2fbd611ed1ed5bec7c82fa2470cc9f662","modified":1719127925891},{"_id":"public/js/utils.js","hash":"f92420649b150703469bba41cbd5c72768beed88","modified":1719127925891},{"_id":"public/images/svg/front-standard.svg","hash":"2020acad847af825195a48f980e460c6a38f0f66","modified":1719127925891}],"Category":[{"name":"css","_id":"clxr8dpdo00042j9kga3yduwn"},{"name":"linux","_id":"clxr8dpdq000b2j9kcc3j2w7o"},{"name":"go","_id":"clxr8dpdr000g2j9k1fsbbzvi"},{"name":"hexo","_id":"clxr8dpdr000j2j9k2ume1v55"},{"name":"tools","_id":"clxr8dpds000p2j9k4ms5cbxg"},{"name":"next","parent":"clxr8dpdr000g2j9k1fsbbzvi","_id":"clxr8dpdt000t2j9kdvly6ro7"},{"name":"docker","_id":"clxr8dpdx001e2j9kax9fdpk8"},{"name":"npm","_id":"clxr8dpdy001j2j9k3brf4g0k"},{"name":"frontend standard","_id":"clxr8dpdz001u2j9kdwjz23tw"}],"Data":[],"Page":[{"title":"archives","date":"2024-05-17T08:49:08.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2024-05-17 16:49:08\n---\n","updated":"2024-05-30T06:11:16.709Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clxr8dpdk00002j9k0v2x29lz","content":"","related_posts":[],"excerpt":"","more":""},{"title":"","date":"2024-05-17T08:48:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle:\ndate: 2024-05-17 16:48:02\ntype: \"tags\"\ncomments: false\n---\n","updated":"2024-06-22T04:29:14.861Z","path":"tags/index.html","layout":"page","_id":"clxr8dpdn00022j9k4p6vh0l1","content":"","related_posts":[],"excerpt":"","more":""},{"title":"","date":"2024-05-17T08:47:06.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle:\ndate: 2024-05-17 16:47:06\ntype: \"categories\"\ncomments: false\n---\n","updated":"2024-06-22T04:30:07.441Z","path":"categories/index.html","layout":"page","_id":"clxr8dpdp00062j9kax8rhvlj","content":"","related_posts":[],"excerpt":"","more":""},{"title":"","date":"2024-05-17T08:46:44.000Z","comments":0,"_content":"\n\n<p style=\"font-size: 20px\">To love oneself is the beginning of a lifelong romance。</p>\n<p style=\"font-size: 20px; text-align: right\">- 爱自己是终身浪漫的开始</p>\n","source":"about/index.md","raw":"---\ntitle:\ndate: 2024-05-17 16:46:44\ncomments: false\n---\n\n\n<p style=\"font-size: 20px\">To love oneself is the beginning of a lifelong romance。</p>\n<p style=\"font-size: 20px; text-align: right\">- 爱自己是终身浪漫的开始</p>\n","updated":"2024-06-22T04:34:44.248Z","path":"about/index.html","layout":"page","_id":"clxr8dpdp00082j9k85c59mah","content":"<p style=\"font-size: 20px\">To love oneself is the beginning of a lifelong romance。</p>\n<p style=\"font-size: 20px; text-align: right\">- 爱自己是终身浪漫的开始</p>\n","related_posts":[],"excerpt":"","more":"<p style=\"font-size: 20px\">To love oneself is the beginning of a lifelong romance。</p>\n<p style=\"font-size: 20px; text-align: right\">- 爱自己是终身浪漫的开始</p>\n"}],"Post":[{"title":"css opacity透明度叠加色差问题","date":"2024-06-21T12:54:26.000Z","_content":"\n#### css中透明度\n\n* `opacity` ：属性用于设置元素的整体透明度。它会影响元素本身及其所有子元素\n* `rgba`：rgba 颜色值中的 `a` 代表 alpha 通道，用于设置颜色的透明度。rgba 可以用来设置背景色、边框色、文字颜色等\n* `hsla`：hsla 颜色值类似于 rgba，但使用色相 (Hue)、饱和度 (Saturation)、亮度 (Lightness) 和 alpha 通道来定义颜色。\n\n#### opacity叠加效果计算\n\nopacity方式叠放：例如opacity 值都是60%，叠加元素的透明度 ：0.6 + 0.6 * （1 - 0.6）= 0.84\n\n","source":"_posts/css opacity透明度叠加色差问题.md","raw":"---\ntitle: css opacity透明度叠加色差问题\ntags:\n  - css\ncategories:\n  - css\ndate: 2024-06-21 20:54:26\n---\n\n#### css中透明度\n\n* `opacity` ：属性用于设置元素的整体透明度。它会影响元素本身及其所有子元素\n* `rgba`：rgba 颜色值中的 `a` 代表 alpha 通道，用于设置颜色的透明度。rgba 可以用来设置背景色、边框色、文字颜色等\n* `hsla`：hsla 颜色值类似于 rgba，但使用色相 (Hue)、饱和度 (Saturation)、亮度 (Lightness) 和 alpha 通道来定义颜色。\n\n#### opacity叠加效果计算\n\nopacity方式叠放：例如opacity 值都是60%，叠加元素的透明度 ：0.6 + 0.6 * （1 - 0.6）= 0.84\n\n","slug":"css opacity透明度叠加色差问题","published":1,"updated":"2024-06-22T00:00:51.305Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdm00012j9kdnrn5xq6","content":"<h4 id=\"css中透明度\"><a href=\"#css中透明度\" class=\"headerlink\" title=\"css中透明度\"></a>css中透明度</h4><ul>\n<li><code>opacity</code> ：属性用于设置元素的整体透明度。它会影响元素本身及其所有子元素</li>\n<li><code>rgba</code>：rgba 颜色值中的 <code>a</code> 代表 alpha 通道，用于设置颜色的透明度。rgba 可以用来设置背景色、边框色、文字颜色等</li>\n<li><code>hsla</code>：hsla 颜色值类似于 rgba，但使用色相 (Hue)、饱和度 (Saturation)、亮度 (Lightness) 和 alpha 通道来定义颜色。</li>\n</ul>\n<h4 id=\"opacity叠加效果计算\"><a href=\"#opacity叠加效果计算\" class=\"headerlink\" title=\"opacity叠加效果计算\"></a>opacity叠加效果计算</h4><p>opacity方式叠放：例如opacity 值都是60%，叠加元素的透明度 ：0.6 + 0.6 * （1 - 0.6）&#x3D; 0.84</p>\n","related_posts":[],"excerpt":"","more":"<h4 id=\"css中透明度\"><a href=\"#css中透明度\" class=\"headerlink\" title=\"css中透明度\"></a>css中透明度</h4><ul>\n<li><code>opacity</code> ：属性用于设置元素的整体透明度。它会影响元素本身及其所有子元素</li>\n<li><code>rgba</code>：rgba 颜色值中的 <code>a</code> 代表 alpha 通道，用于设置颜色的透明度。rgba 可以用来设置背景色、边框色、文字颜色等</li>\n<li><code>hsla</code>：hsla 颜色值类似于 rgba，但使用色相 (Hue)、饱和度 (Saturation)、亮度 (Lightness) 和 alpha 通道来定义颜色。</li>\n</ul>\n<h4 id=\"opacity叠加效果计算\"><a href=\"#opacity叠加效果计算\" class=\"headerlink\" title=\"opacity叠加效果计算\"></a>opacity叠加效果计算</h4><p>opacity方式叠放：例如opacity 值都是60%，叠加元素的透明度 ：0.6 + 0.6 * （1 - 0.6）&#x3D; 0.84</p>\n"},{"title":"docker中nginx服务器ssl证书安装部署","date":"2024-06-03T22:01:42.000Z","_content":"\n> <font color=\"#51aa38\">Tip 1：</font>https需要默认开启443端口，配置前请先确认\n> <font color=\"#51aa38\">Tip 2：</font>nginx 服务器需要安装 http_ssl_module 模块\n\n#### 一. 下载证书文件并解压,解压后有四个文件(以域名“xxx.com”为例)\n* xxx.com_bundle.crt - 证书文件\n* xxx.com_bundle.pem - 证书文件\n* xxx.com_bundle.key - 私钥文件\n* xxx.com_bundle.csr - csr文件，提供给CA机构的，安装时可忽略\n\n#### 二. 证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中.crt以及.key结尾的文件）\n> 我的存放目录：/etc/my-nginx\n\n#### 三. 运行nginx容器时指定nginx.conf 配置中证书以及私钥在宿主主机目录的映射\n```shell\ndocker run -p 443:443 -v /etc/my-nginx:/etc/nginx/certs\n```\n\n#### 四. 具体ssl在nginx的配置可参考下面\n```shell\nserver {\n     #SSL 默认访问端口号为 443\n     listen 443 ssl; \n     #请填写绑定证书的域名\n     server_name cloud.tencent.com; \n     #请填写证书文件的相对路径或绝对路径\n     ssl_certificate cloud.tencent.com_bundle.crt; \n     #请填写私钥文件的相对路径或绝对路径\n     ssl_certificate_key cloud.tencent.com.key; \n     ssl_session_timeout 5m;\n     #请按照以下协议配置\n     ssl_protocols TLSv1.2 TLSv1.3; \n     #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n     ssl_prefer_server_ciphers on;\n     location / {\n         #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。\n         #例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。\n         root html; \n         index  index.html index.htm;\n     }\n }\nserver {\n listen 80;\n #请填写绑定证书的域名\n server_name cloud.tencent.com; \n #把http的域名请求转成https\n return 301 https://$host$request_uri; \n}\n\n```","source":"_posts/docker中nginx服务器ssl证书安装部署.md","raw":"---\ntitle: docker中nginx服务器ssl证书安装部署\ndate: 2024-06-04 06:01:42\ntags:\n  - nginx \n  - docker\ncategories:\n  - linux\n---\n\n> <font color=\"#51aa38\">Tip 1：</font>https需要默认开启443端口，配置前请先确认\n> <font color=\"#51aa38\">Tip 2：</font>nginx 服务器需要安装 http_ssl_module 模块\n\n#### 一. 下载证书文件并解压,解压后有四个文件(以域名“xxx.com”为例)\n* xxx.com_bundle.crt - 证书文件\n* xxx.com_bundle.pem - 证书文件\n* xxx.com_bundle.key - 私钥文件\n* xxx.com_bundle.csr - csr文件，提供给CA机构的，安装时可忽略\n\n#### 二. 证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中.crt以及.key结尾的文件）\n> 我的存放目录：/etc/my-nginx\n\n#### 三. 运行nginx容器时指定nginx.conf 配置中证书以及私钥在宿主主机目录的映射\n```shell\ndocker run -p 443:443 -v /etc/my-nginx:/etc/nginx/certs\n```\n\n#### 四. 具体ssl在nginx的配置可参考下面\n```shell\nserver {\n     #SSL 默认访问端口号为 443\n     listen 443 ssl; \n     #请填写绑定证书的域名\n     server_name cloud.tencent.com; \n     #请填写证书文件的相对路径或绝对路径\n     ssl_certificate cloud.tencent.com_bundle.crt; \n     #请填写私钥文件的相对路径或绝对路径\n     ssl_certificate_key cloud.tencent.com.key; \n     ssl_session_timeout 5m;\n     #请按照以下协议配置\n     ssl_protocols TLSv1.2 TLSv1.3; \n     #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。\n     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; \n     ssl_prefer_server_ciphers on;\n     location / {\n         #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。\n         #例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。\n         root html; \n         index  index.html index.htm;\n     }\n }\nserver {\n listen 80;\n #请填写绑定证书的域名\n server_name cloud.tencent.com; \n #把http的域名请求转成https\n return 301 https://$host$request_uri; \n}\n\n```","slug":"docker中nginx服务器ssl证书安装部署","published":1,"updated":"2024-06-04T04:34:43.814Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdn00032j9kh4xu88y8","content":"<blockquote>\n<p><font color=\"#51aa38\">Tip 1：</font>https需要默认开启443端口，配置前请先确认<br><font color=\"#51aa38\">Tip 2：</font>nginx 服务器需要安装 http_ssl_module 模块</p>\n</blockquote>\n<h4 id=\"一-下载证书文件并解压-解压后有四个文件-以域名“xxx-com”为例\"><a href=\"#一-下载证书文件并解压-解压后有四个文件-以域名“xxx-com”为例\" class=\"headerlink\" title=\"一. 下载证书文件并解压,解压后有四个文件(以域名“xxx.com”为例)\"></a>一. 下载证书文件并解压,解压后有四个文件(以域名“xxx.com”为例)</h4><ul>\n<li>xxx.com_bundle.crt - 证书文件</li>\n<li>xxx.com_bundle.pem - 证书文件</li>\n<li>xxx.com_bundle.key - 私钥文件</li>\n<li>xxx.com_bundle.csr - csr文件，提供给CA机构的，安装时可忽略</li>\n</ul>\n<h4 id=\"二-证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中-crt以及-key结尾的文件）\"><a href=\"#二-证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中-crt以及-key结尾的文件）\" class=\"headerlink\" title=\"二. 证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中.crt以及.key结尾的文件）\"></a>二. 证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中.crt以及.key结尾的文件）</h4><blockquote>\n<p>我的存放目录：&#x2F;etc&#x2F;my-nginx</p>\n</blockquote>\n<h4 id=\"三-运行nginx容器时指定nginx-conf-配置中证书以及私钥在宿主主机目录的映射\"><a href=\"#三-运行nginx容器时指定nginx-conf-配置中证书以及私钥在宿主主机目录的映射\" class=\"headerlink\" title=\"三. 运行nginx容器时指定nginx.conf 配置中证书以及私钥在宿主主机目录的映射\"></a>三. 运行nginx容器时指定nginx.conf 配置中证书以及私钥在宿主主机目录的映射</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 443:443 -v /etc/my-nginx:/etc/nginx/certs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-具体ssl在nginx的配置可参考下面\"><a href=\"#四-具体ssl在nginx的配置可参考下面\" class=\"headerlink\" title=\"四. 具体ssl在nginx的配置可参考下面\"></a>四. 具体ssl在nginx的配置可参考下面</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">     #SSL 默认访问端口号为 443</span><br><span class=\"line\">     listen 443 ssl; </span><br><span class=\"line\">     #请填写绑定证书的域名</span><br><span class=\"line\">     server_name cloud.tencent.com; </span><br><span class=\"line\">     #请填写证书文件的相对路径或绝对路径</span><br><span class=\"line\">     ssl_certificate cloud.tencent.com_bundle.crt; </span><br><span class=\"line\">     #请填写私钥文件的相对路径或绝对路径</span><br><span class=\"line\">     ssl_certificate_key cloud.tencent.com.key; </span><br><span class=\"line\">     ssl_session_timeout 5m;</span><br><span class=\"line\">     #请按照以下协议配置</span><br><span class=\"line\">     ssl_protocols TLSv1.2 TLSv1.3; </span><br><span class=\"line\">     #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class=\"line\">     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class=\"line\">     ssl_prefer_server_ciphers on;</span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">         #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class=\"line\">         #例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。</span><br><span class=\"line\">         root html; </span><br><span class=\"line\">         index  index.html index.htm;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"> listen 80;</span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">请填写绑定证书的域名</span></span><br><span class=\"line\"> server_name cloud.tencent.com; </span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">把http的域名请求转成https</span></span><br><span class=\"line\"> return 301 https://$host$request_uri; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","related_posts":[],"excerpt":"","more":"<blockquote>\n<p><font color=\"#51aa38\">Tip 1：</font>https需要默认开启443端口，配置前请先确认<br><font color=\"#51aa38\">Tip 2：</font>nginx 服务器需要安装 http_ssl_module 模块</p>\n</blockquote>\n<h4 id=\"一-下载证书文件并解压-解压后有四个文件-以域名“xxx-com”为例\"><a href=\"#一-下载证书文件并解压-解压后有四个文件-以域名“xxx-com”为例\" class=\"headerlink\" title=\"一. 下载证书文件并解压,解压后有四个文件(以域名“xxx.com”为例)\"></a>一. 下载证书文件并解压,解压后有四个文件(以域名“xxx.com”为例)</h4><ul>\n<li>xxx.com_bundle.crt - 证书文件</li>\n<li>xxx.com_bundle.pem - 证书文件</li>\n<li>xxx.com_bundle.key - 私钥文件</li>\n<li>xxx.com_bundle.csr - csr文件，提供给CA机构的，安装时可忽略</li>\n</ul>\n<h4 id=\"二-证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中-crt以及-key结尾的文件）\"><a href=\"#二-证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中-crt以及-key结尾的文件）\" class=\"headerlink\" title=\"二. 证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中.crt以及.key结尾的文件）\"></a>二. 证书以及私钥文件上传至云服务某一个目录存放（只需上传上面四个中.crt以及.key结尾的文件）</h4><blockquote>\n<p>我的存放目录：&#x2F;etc&#x2F;my-nginx</p>\n</blockquote>\n<h4 id=\"三-运行nginx容器时指定nginx-conf-配置中证书以及私钥在宿主主机目录的映射\"><a href=\"#三-运行nginx容器时指定nginx-conf-配置中证书以及私钥在宿主主机目录的映射\" class=\"headerlink\" title=\"三. 运行nginx容器时指定nginx.conf 配置中证书以及私钥在宿主主机目录的映射\"></a>三. 运行nginx容器时指定nginx.conf 配置中证书以及私钥在宿主主机目录的映射</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -p 443:443 -v /etc/my-nginx:/etc/nginx/certs</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-具体ssl在nginx的配置可参考下面\"><a href=\"#四-具体ssl在nginx的配置可参考下面\" class=\"headerlink\" title=\"四. 具体ssl在nginx的配置可参考下面\"></a>四. 具体ssl在nginx的配置可参考下面</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">     #SSL 默认访问端口号为 443</span><br><span class=\"line\">     listen 443 ssl; </span><br><span class=\"line\">     #请填写绑定证书的域名</span><br><span class=\"line\">     server_name cloud.tencent.com; </span><br><span class=\"line\">     #请填写证书文件的相对路径或绝对路径</span><br><span class=\"line\">     ssl_certificate cloud.tencent.com_bundle.crt; </span><br><span class=\"line\">     #请填写私钥文件的相对路径或绝对路径</span><br><span class=\"line\">     ssl_certificate_key cloud.tencent.com.key; </span><br><span class=\"line\">     ssl_session_timeout 5m;</span><br><span class=\"line\">     #请按照以下协议配置</span><br><span class=\"line\">     ssl_protocols TLSv1.2 TLSv1.3; </span><br><span class=\"line\">     #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class=\"line\">     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class=\"line\">     ssl_prefer_server_ciphers on;</span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">         #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class=\"line\">         #例如，您的网站主页在 Nginx 服务器的 /etc/www 目录下，则请修改 root 后面的 html 为 /etc/www。</span><br><span class=\"line\">         root html; </span><br><span class=\"line\">         index  index.html index.htm;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\"> listen 80;</span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">请填写绑定证书的域名</span></span><br><span class=\"line\"> server_name cloud.tencent.com; </span><br><span class=\"line\"><span class=\"meta prompt_\"> #</span><span class=\"language-bash\">把http的域名请求转成https</span></span><br><span class=\"line\"> return 301 https://$host$request_uri; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"go gin框架接入swagger，next项目自动生成接口文档","date":"2024-06-16T10:32:17.000Z","_content":"\n#### 准备工作\n\n* 安装swagger cli（用与格式化注释以及生成swagger json文件）\n\n```she\ngo get -u github.com/swaggo/swag/cmd/swag\n```\n\n* mac中安装后需要将swag移动到下面的路径下，确保shell中swag命令全局可用：\n\n```she\nsudo mv $GOPATH/bin/swag /usr/local/go/bin\n```\n\n* 检测是否成功安装\n\n```she\nswag -v\n```\n\n* 其他扩展文件安装\n\n```she\ngo get -u -v github.com/swaggo/gin-swagger # 集成 Swagger 文档到 Go 的 Gin 框架中的库\ngo get -u -v github.com/swaggo/files # Go 项目中集成 Swagger UI\ngo get -u -v github.com/alecthomas/template # Go 语言中用于文本和 HTML 模板处理的库\n```\n\n#### 使用流程\n\n![](../images/svg/swagger.svg)\n\n##### 注释\n\n[官方文档](https://swagger.io/docs/specification/about/)\n\n|   注解   |                             说明                             |\n| :------: | :----------------------------------------------------------: |\n| @Summary |                             摘要                             |\n| @Produce |              生成的文档的MIME类型，json、xml等               |\n|  @Param  | 参数，左=>右分别为：`参数名`、`入参类型`、`数据类型`、`是否必填`、`注释` |\n| @Success |  响应成功，从左到右分别为：状态码、参数类型、数据类型、注释  |\n| @Failure |  响应失败，从左到右分别为：状态码、参数类型、数据类型、注释  |\n| @Router  |          路由，从左到右分别为：路由地址，HTTP 方法           |\n\n代码示例\n\n> Tips:  需要注意的是，注释中引用其他类型，比如model.Tool ，需要在Tool上添加注释，swag init才会自动做类型的关联，不然swag识别不了该写法\n\n```go\n// Tool represents a tool entity\n// @Description Tool represents a tool entity\ntype Tool struct {\n\tID       uint   `json:\"id,omitempty\" gorm:\"column:id\" swaggerignore:\"true\"`\n\tCategory string `json:\"category\" gorm:\"column:category\"`\n\tName     string `json:\"name\" gorm:\"column:name\"`\n\tUrl      string `json:\"url\" gorm:\"column:url\"`\n}\n```\n\n\n\n```go\n//\t@Summary\t我的工具信息列表获取\n//\t@Produce\tjson\n//\t@Success\t200\t{object}\tmodel.Tool\t\"请求成功\"\n//\t@Failure\t400\t{string}\tstring\t\t\"请求错误\"\n//\t@Failure\t500\t{string}\tstring\t\t\"内部错误\"\n//\t@Router\t\t/tool/list [get]\nfunc (T ToolController) ToolListController(c *gin.Context) {\n  // do something\n}\n\n//\t@Summary\t我的工具项新增\n//\t@Produce\tjson\n//\t@Param\t\ttool\tbody\t\tmodel.Tool\ttrue\t\"Tool object to be added\"\n//\t@Success\t200\t\t{object}\tmodel.Tool\t\"成功\"\n//\t@Failure\t400\t\t{object}\tstring\t\t\"请求错误\"\n//\t@Failure\t500\t\t{object}\tstring\t\t\"内部错误\"\n//\t@Router\t\t/tool/add [post]\nfunc (T ToolController) ToolAddController(c *gin.Context) {\n  // do something\n}\n```\n\n##### 格式化\n\n```she\nswag fmt # 会扫描该项目所有包含注释的方法，对注释进行格式化\n```\n\n##### 文档生成\n\nswag init 扫描文件，一般都需要包含main.go，不然会报错，笔者项目main.go不在根目录下，所以需要手动指定swag扫描的文件，这里我们指定了，`./cmd/my_website_backend`该文件包含main.go，`./internal/app/controller`该文件中包含添加注释的控制器函数，`./internal/app/model`该文件包含数据模型映射的类型，注释中有时候需要引用该类型；最后`-o ./api/swagger`指定生成的文档存储在`./api/swagger`文件夹中\n\n```go\nswag init --dir ./cmd/my_website_backend,./internal/app/controller,./internal/app/model -o ./api/swagger\n```\n\n##### 文档路由添加\n\n生成的文档需要有专门的路由进行展示，需要我们配置：\n\n```go\npackage router\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\tswaggerFiles \"github.com/swaggo/files\"\n\tginSwagger \"github.com/swaggo/gin-swagger\"\n\t_ \"web_backend.com/m/v2/api/swagger\" // 这里替换成swag init 生成后的go package 路径即可\n)\n\n// GenSwaggerRouters swagger页面路由\nfunc GenSwaggerRouters(r *gin.Engine) {\n\tr.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n}\n\n```\n\n#### 前端接口文档自动生成\n\n* 前后端对接接口，前端手动去添加typescript类型的话，费时费力\n* 行业有这样一种解决方案，利用openApi规范，后端按规范写好json注释，我们利用提供的`openapi-generator`cli工具生成支持的任意类型的接口，避免重复声明类型\n* 官方有现成的解决方案，行业内也有许多，咱们这里选用国内阿里开源的库[@umijs/openapi](https://github.com/chenshuai2144/openapi2typescript)去生成接口文档，更好的其他方式，可以自己去探索\n\n##### 安装\n\n```shell\npnpm add -D @umijs/openapi\n```\n\n##### 使用\n\n* 博主这里是放在根目录下的script/genOpenApi.js文件中的\n\n```javascript\nimport { generateService } from \"@umijs/openapi\";\n\ngenerateService({\n  schemaPath: \"http://127.0.0.1:8001/swagger/doc.json\", // swagger.json地址，按需修改\n  serversPath: \"src\",// 生成后的文件路径，按需修改\n});\n\n```\n\n* package.json scripts中添加生成的脚本命令，按自己需求更改\n\n```shell\n\"openApi\": \"node script/genOpenApi.js\"\n```\n\n##### 其他配置参照[官方文档](https://github.com/chenshuai2144/openapi2typescript)\n","source":"_posts/go-gin框架接入swagger，next项目自动生成接口文档.md","raw":"---\ntitle: go gin框架接入swagger，next项目自动生成接口文档\ntags:\n  - go\n  - gin\n  - swagger\n  - next\n  - openapi-generator\ncategories:\n  - go\n  - next\ndate: 2024-06-16 18:32:17\n---\n\n#### 准备工作\n\n* 安装swagger cli（用与格式化注释以及生成swagger json文件）\n\n```she\ngo get -u github.com/swaggo/swag/cmd/swag\n```\n\n* mac中安装后需要将swag移动到下面的路径下，确保shell中swag命令全局可用：\n\n```she\nsudo mv $GOPATH/bin/swag /usr/local/go/bin\n```\n\n* 检测是否成功安装\n\n```she\nswag -v\n```\n\n* 其他扩展文件安装\n\n```she\ngo get -u -v github.com/swaggo/gin-swagger # 集成 Swagger 文档到 Go 的 Gin 框架中的库\ngo get -u -v github.com/swaggo/files # Go 项目中集成 Swagger UI\ngo get -u -v github.com/alecthomas/template # Go 语言中用于文本和 HTML 模板处理的库\n```\n\n#### 使用流程\n\n![](../images/svg/swagger.svg)\n\n##### 注释\n\n[官方文档](https://swagger.io/docs/specification/about/)\n\n|   注解   |                             说明                             |\n| :------: | :----------------------------------------------------------: |\n| @Summary |                             摘要                             |\n| @Produce |              生成的文档的MIME类型，json、xml等               |\n|  @Param  | 参数，左=>右分别为：`参数名`、`入参类型`、`数据类型`、`是否必填`、`注释` |\n| @Success |  响应成功，从左到右分别为：状态码、参数类型、数据类型、注释  |\n| @Failure |  响应失败，从左到右分别为：状态码、参数类型、数据类型、注释  |\n| @Router  |          路由，从左到右分别为：路由地址，HTTP 方法           |\n\n代码示例\n\n> Tips:  需要注意的是，注释中引用其他类型，比如model.Tool ，需要在Tool上添加注释，swag init才会自动做类型的关联，不然swag识别不了该写法\n\n```go\n// Tool represents a tool entity\n// @Description Tool represents a tool entity\ntype Tool struct {\n\tID       uint   `json:\"id,omitempty\" gorm:\"column:id\" swaggerignore:\"true\"`\n\tCategory string `json:\"category\" gorm:\"column:category\"`\n\tName     string `json:\"name\" gorm:\"column:name\"`\n\tUrl      string `json:\"url\" gorm:\"column:url\"`\n}\n```\n\n\n\n```go\n//\t@Summary\t我的工具信息列表获取\n//\t@Produce\tjson\n//\t@Success\t200\t{object}\tmodel.Tool\t\"请求成功\"\n//\t@Failure\t400\t{string}\tstring\t\t\"请求错误\"\n//\t@Failure\t500\t{string}\tstring\t\t\"内部错误\"\n//\t@Router\t\t/tool/list [get]\nfunc (T ToolController) ToolListController(c *gin.Context) {\n  // do something\n}\n\n//\t@Summary\t我的工具项新增\n//\t@Produce\tjson\n//\t@Param\t\ttool\tbody\t\tmodel.Tool\ttrue\t\"Tool object to be added\"\n//\t@Success\t200\t\t{object}\tmodel.Tool\t\"成功\"\n//\t@Failure\t400\t\t{object}\tstring\t\t\"请求错误\"\n//\t@Failure\t500\t\t{object}\tstring\t\t\"内部错误\"\n//\t@Router\t\t/tool/add [post]\nfunc (T ToolController) ToolAddController(c *gin.Context) {\n  // do something\n}\n```\n\n##### 格式化\n\n```she\nswag fmt # 会扫描该项目所有包含注释的方法，对注释进行格式化\n```\n\n##### 文档生成\n\nswag init 扫描文件，一般都需要包含main.go，不然会报错，笔者项目main.go不在根目录下，所以需要手动指定swag扫描的文件，这里我们指定了，`./cmd/my_website_backend`该文件包含main.go，`./internal/app/controller`该文件中包含添加注释的控制器函数，`./internal/app/model`该文件包含数据模型映射的类型，注释中有时候需要引用该类型；最后`-o ./api/swagger`指定生成的文档存储在`./api/swagger`文件夹中\n\n```go\nswag init --dir ./cmd/my_website_backend,./internal/app/controller,./internal/app/model -o ./api/swagger\n```\n\n##### 文档路由添加\n\n生成的文档需要有专门的路由进行展示，需要我们配置：\n\n```go\npackage router\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\tswaggerFiles \"github.com/swaggo/files\"\n\tginSwagger \"github.com/swaggo/gin-swagger\"\n\t_ \"web_backend.com/m/v2/api/swagger\" // 这里替换成swag init 生成后的go package 路径即可\n)\n\n// GenSwaggerRouters swagger页面路由\nfunc GenSwaggerRouters(r *gin.Engine) {\n\tr.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n}\n\n```\n\n#### 前端接口文档自动生成\n\n* 前后端对接接口，前端手动去添加typescript类型的话，费时费力\n* 行业有这样一种解决方案，利用openApi规范，后端按规范写好json注释，我们利用提供的`openapi-generator`cli工具生成支持的任意类型的接口，避免重复声明类型\n* 官方有现成的解决方案，行业内也有许多，咱们这里选用国内阿里开源的库[@umijs/openapi](https://github.com/chenshuai2144/openapi2typescript)去生成接口文档，更好的其他方式，可以自己去探索\n\n##### 安装\n\n```shell\npnpm add -D @umijs/openapi\n```\n\n##### 使用\n\n* 博主这里是放在根目录下的script/genOpenApi.js文件中的\n\n```javascript\nimport { generateService } from \"@umijs/openapi\";\n\ngenerateService({\n  schemaPath: \"http://127.0.0.1:8001/swagger/doc.json\", // swagger.json地址，按需修改\n  serversPath: \"src\",// 生成后的文件路径，按需修改\n});\n\n```\n\n* package.json scripts中添加生成的脚本命令，按自己需求更改\n\n```shell\n\"openApi\": \"node script/genOpenApi.js\"\n```\n\n##### 其他配置参照[官方文档](https://github.com/chenshuai2144/openapi2typescript)\n","slug":"go-gin框架接入swagger，next项目自动生成接口文档","published":1,"updated":"2024-06-16T12:06:10.844Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdp00072j9k7pn6904i","content":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul>\n<li>安装swagger cli（用与格式化注释以及生成swagger json文件）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -u github.com/swaggo/swag/cmd/swag</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mac中安装后需要将swag移动到下面的路径下，确保shell中swag命令全局可用：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mv $GOPATH/bin/swag /usr/local/go/bin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测是否成功安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">swag -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他扩展文件安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/swaggo/gin-swagger # 集成 Swagger 文档到 Go 的 Gin 框架中的库</span><br><span class=\"line\">go get -u -v github.com/swaggo/files # Go 项目中集成 Swagger UI</span><br><span class=\"line\">go get -u -v github.com/alecthomas/template # Go 语言中用于文本和 HTML 模板处理的库</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h4><p><img data-src=\"/../images/svg/swagger.svg\"></p>\n<h5 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h5><p><a href=\"https://swagger.io/docs/specification/about/\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">注解</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">@Summary</td>\n<td align=\"center\">摘要</td>\n</tr>\n<tr>\n<td align=\"center\">@Produce</td>\n<td align=\"center\">生成的文档的MIME类型，json、xml等</td>\n</tr>\n<tr>\n<td align=\"center\">@Param</td>\n<td align=\"center\">参数，左&#x3D;&gt;右分别为：<code>参数名</code>、<code>入参类型</code>、<code>数据类型</code>、<code>是否必填</code>、<code>注释</code></td>\n</tr>\n<tr>\n<td align=\"center\">@Success</td>\n<td align=\"center\">响应成功，从左到右分别为：状态码、参数类型、数据类型、注释</td>\n</tr>\n<tr>\n<td align=\"center\">@Failure</td>\n<td align=\"center\">响应失败，从左到右分别为：状态码、参数类型、数据类型、注释</td>\n</tr>\n<tr>\n<td align=\"center\">@Router</td>\n<td align=\"center\">路由，从左到右分别为：路由地址，HTTP 方法</td>\n</tr>\n</tbody></table>\n<p>代码示例</p>\n<blockquote>\n<p>Tips:  需要注意的是，注释中引用其他类型，比如model.Tool ，需要在Tool上添加注释，swag init才会自动做类型的关联，不然swag识别不了该写法</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Tool represents a tool entity</span></span><br><span class=\"line\"><span class=\"comment\">// @Description Tool represents a tool entity</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Tool <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID       <span class=\"type\">uint</span>   <span class=\"string\">`json:&quot;id,omitempty&quot; gorm:&quot;column:id&quot; swaggerignore:&quot;true&quot;`</span></span><br><span class=\"line\">\tCategory <span class=\"type\">string</span> <span class=\"string\">`json:&quot;category&quot; gorm:&quot;column:category&quot;`</span></span><br><span class=\"line\">\tName     <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot; gorm:&quot;column:name&quot;`</span></span><br><span class=\"line\">\tUrl      <span class=\"type\">string</span> <span class=\"string\">`json:&quot;url&quot; gorm:&quot;column:url&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t@Summary\t我的工具信息列表获取</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Produce\tjson</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Success\t200\t&#123;object&#125;\tmodel.Tool\t&quot;请求成功&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t400\t&#123;string&#125;\tstring\t\t&quot;请求错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t500\t&#123;string&#125;\tstring\t\t&quot;内部错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Router\t\t/tool/list [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(T ToolController)</span></span> ToolListController(c *gin.Context) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t@Summary\t我的工具项新增</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Produce\tjson</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Param\t\ttool\tbody\t\tmodel.Tool\ttrue\t&quot;Tool object to be added&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Success\t200\t\t&#123;object&#125;\tmodel.Tool\t&quot;成功&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t400\t\t&#123;object&#125;\tstring\t\t&quot;请求错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t500\t\t&#123;object&#125;\tstring\t\t&quot;内部错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Router\t\t/tool/add [post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(T ToolController)</span></span> ToolAddController(c *gin.Context) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">swag fmt # 会扫描该项目所有包含注释的方法，对注释进行格式化</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文档生成\"><a href=\"#文档生成\" class=\"headerlink\" title=\"文档生成\"></a>文档生成</h5><p>swag init 扫描文件，一般都需要包含main.go，不然会报错，笔者项目main.go不在根目录下，所以需要手动指定swag扫描的文件，这里我们指定了，<code>./cmd/my_website_backend</code>该文件包含main.go，<code>./internal/app/controller</code>该文件中包含添加注释的控制器函数，<code>./internal/app/model</code>该文件包含数据模型映射的类型，注释中有时候需要引用该类型；最后<code>-o ./api/swagger</code>指定生成的文档存储在<code>./api/swagger</code>文件夹中</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">swag init --dir ./cmd/my_website_backend,./internal/app/controller,./internal/app/model -o ./api/swagger</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文档路由添加\"><a href=\"#文档路由添加\" class=\"headerlink\" title=\"文档路由添加\"></a>文档路由添加</h5><p>生成的文档需要有专门的路由进行展示，需要我们配置：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> router</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\tswaggerFiles <span class=\"string\">&quot;github.com/swaggo/files&quot;</span></span><br><span class=\"line\">\tginSwagger <span class=\"string\">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;web_backend.com/m/v2/api/swagger&quot;</span> <span class=\"comment\">// 这里替换成swag init 生成后的go package 路径即可</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GenSwaggerRouters swagger页面路由</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GenSwaggerRouters</span><span class=\"params\">(r *gin.Engine)</span></span> &#123;</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端接口文档自动生成\"><a href=\"#前端接口文档自动生成\" class=\"headerlink\" title=\"前端接口文档自动生成\"></a>前端接口文档自动生成</h4><ul>\n<li>前后端对接接口，前端手动去添加typescript类型的话，费时费力</li>\n<li>行业有这样一种解决方案，利用openApi规范，后端按规范写好json注释，我们利用提供的<code>openapi-generator</code>cli工具生成支持的任意类型的接口，避免重复声明类型</li>\n<li>官方有现成的解决方案，行业内也有许多，咱们这里选用国内阿里开源的库<a href=\"https://github.com/chenshuai2144/openapi2typescript\">@umijs&#x2F;openapi</a>去生成接口文档，更好的其他方式，可以自己去探索</li>\n</ul>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pnpm add -D @umijs/openapi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><ul>\n<li>博主这里是放在根目录下的script&#x2F;genOpenApi.js文件中的</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@umijs/openapi&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">generateService</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">schemaPath</span>: <span class=\"string\">&quot;http://127.0.0.1:8001/swagger/doc.json&quot;</span>, <span class=\"comment\">// swagger.json地址，按需修改</span></span><br><span class=\"line\">  <span class=\"attr\">serversPath</span>: <span class=\"string\">&quot;src&quot;</span>,<span class=\"comment\">// 生成后的文件路径，按需修改</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>package.json scripts中添加生成的脚本命令，按自己需求更改</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;openApi&quot;: &quot;node script/genOpenApi.js&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其他配置参照官方文档\"><a href=\"#其他配置参照官方文档\" class=\"headerlink\" title=\"其他配置参照官方文档\"></a>其他配置参照<a href=\"https://github.com/chenshuai2144/openapi2typescript\">官方文档</a></h5>","related_posts":[],"excerpt":"","more":"<h4 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h4><ul>\n<li>安装swagger cli（用与格式化注释以及生成swagger json文件）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -u github.com/swaggo/swag/cmd/swag</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mac中安装后需要将swag移动到下面的路径下，确保shell中swag命令全局可用：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mv $GOPATH/bin/swag /usr/local/go/bin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>检测是否成功安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">swag -v</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他扩展文件安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/swaggo/gin-swagger # 集成 Swagger 文档到 Go 的 Gin 框架中的库</span><br><span class=\"line\">go get -u -v github.com/swaggo/files # Go 项目中集成 Swagger UI</span><br><span class=\"line\">go get -u -v github.com/alecthomas/template # Go 语言中用于文本和 HTML 模板处理的库</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h4><p><img data-src=\"/../images/svg/swagger.svg\"></p>\n<h5 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h5><p><a href=\"https://swagger.io/docs/specification/about/\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">注解</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">@Summary</td>\n<td align=\"center\">摘要</td>\n</tr>\n<tr>\n<td align=\"center\">@Produce</td>\n<td align=\"center\">生成的文档的MIME类型，json、xml等</td>\n</tr>\n<tr>\n<td align=\"center\">@Param</td>\n<td align=\"center\">参数，左&#x3D;&gt;右分别为：<code>参数名</code>、<code>入参类型</code>、<code>数据类型</code>、<code>是否必填</code>、<code>注释</code></td>\n</tr>\n<tr>\n<td align=\"center\">@Success</td>\n<td align=\"center\">响应成功，从左到右分别为：状态码、参数类型、数据类型、注释</td>\n</tr>\n<tr>\n<td align=\"center\">@Failure</td>\n<td align=\"center\">响应失败，从左到右分别为：状态码、参数类型、数据类型、注释</td>\n</tr>\n<tr>\n<td align=\"center\">@Router</td>\n<td align=\"center\">路由，从左到右分别为：路由地址，HTTP 方法</td>\n</tr>\n</tbody></table>\n<p>代码示例</p>\n<blockquote>\n<p>Tips:  需要注意的是，注释中引用其他类型，比如model.Tool ，需要在Tool上添加注释，swag init才会自动做类型的关联，不然swag识别不了该写法</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Tool represents a tool entity</span></span><br><span class=\"line\"><span class=\"comment\">// @Description Tool represents a tool entity</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Tool <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tID       <span class=\"type\">uint</span>   <span class=\"string\">`json:&quot;id,omitempty&quot; gorm:&quot;column:id&quot; swaggerignore:&quot;true&quot;`</span></span><br><span class=\"line\">\tCategory <span class=\"type\">string</span> <span class=\"string\">`json:&quot;category&quot; gorm:&quot;column:category&quot;`</span></span><br><span class=\"line\">\tName     <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot; gorm:&quot;column:name&quot;`</span></span><br><span class=\"line\">\tUrl      <span class=\"type\">string</span> <span class=\"string\">`json:&quot;url&quot; gorm:&quot;column:url&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\t@Summary\t我的工具信息列表获取</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Produce\tjson</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Success\t200\t&#123;object&#125;\tmodel.Tool\t&quot;请求成功&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t400\t&#123;string&#125;\tstring\t\t&quot;请求错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t500\t&#123;string&#125;\tstring\t\t&quot;内部错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Router\t\t/tool/list [get]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(T ToolController)</span></span> ToolListController(c *gin.Context) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t@Summary\t我的工具项新增</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Produce\tjson</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Param\t\ttool\tbody\t\tmodel.Tool\ttrue\t&quot;Tool object to be added&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Success\t200\t\t&#123;object&#125;\tmodel.Tool\t&quot;成功&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t400\t\t&#123;object&#125;\tstring\t\t&quot;请求错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Failure\t500\t\t&#123;object&#125;\tstring\t\t&quot;内部错误&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//\t@Router\t\t/tool/add [post]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(T ToolController)</span></span> ToolAddController(c *gin.Context) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">swag fmt # 会扫描该项目所有包含注释的方法，对注释进行格式化</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文档生成\"><a href=\"#文档生成\" class=\"headerlink\" title=\"文档生成\"></a>文档生成</h5><p>swag init 扫描文件，一般都需要包含main.go，不然会报错，笔者项目main.go不在根目录下，所以需要手动指定swag扫描的文件，这里我们指定了，<code>./cmd/my_website_backend</code>该文件包含main.go，<code>./internal/app/controller</code>该文件中包含添加注释的控制器函数，<code>./internal/app/model</code>该文件包含数据模型映射的类型，注释中有时候需要引用该类型；最后<code>-o ./api/swagger</code>指定生成的文档存储在<code>./api/swagger</code>文件夹中</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">swag init --dir ./cmd/my_website_backend,./internal/app/controller,./internal/app/model -o ./api/swagger</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文档路由添加\"><a href=\"#文档路由添加\" class=\"headerlink\" title=\"文档路由添加\"></a>文档路由添加</h5><p>生成的文档需要有专门的路由进行展示，需要我们配置：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> router</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\tswaggerFiles <span class=\"string\">&quot;github.com/swaggo/files&quot;</span></span><br><span class=\"line\">\tginSwagger <span class=\"string\">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;web_backend.com/m/v2/api/swagger&quot;</span> <span class=\"comment\">// 这里替换成swag init 生成后的go package 路径即可</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GenSwaggerRouters swagger页面路由</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GenSwaggerRouters</span><span class=\"params\">(r *gin.Engine)</span></span> &#123;</span><br><span class=\"line\">\tr.GET(<span class=\"string\">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerFiles.Handler))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"前端接口文档自动生成\"><a href=\"#前端接口文档自动生成\" class=\"headerlink\" title=\"前端接口文档自动生成\"></a>前端接口文档自动生成</h4><ul>\n<li>前后端对接接口，前端手动去添加typescript类型的话，费时费力</li>\n<li>行业有这样一种解决方案，利用openApi规范，后端按规范写好json注释，我们利用提供的<code>openapi-generator</code>cli工具生成支持的任意类型的接口，避免重复声明类型</li>\n<li>官方有现成的解决方案，行业内也有许多，咱们这里选用国内阿里开源的库<a href=\"https://github.com/chenshuai2144/openapi2typescript\">@umijs&#x2F;openapi</a>去生成接口文档，更好的其他方式，可以自己去探索</li>\n</ul>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pnpm add -D @umijs/openapi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><ul>\n<li>博主这里是放在根目录下的script&#x2F;genOpenApi.js文件中的</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@umijs/openapi&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">generateService</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">schemaPath</span>: <span class=\"string\">&quot;http://127.0.0.1:8001/swagger/doc.json&quot;</span>, <span class=\"comment\">// swagger.json地址，按需修改</span></span><br><span class=\"line\">  <span class=\"attr\">serversPath</span>: <span class=\"string\">&quot;src&quot;</span>,<span class=\"comment\">// 生成后的文件路径，按需修改</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>package.json scripts中添加生成的脚本命令，按自己需求更改</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;openApi&quot;: &quot;node script/genOpenApi.js&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其他配置参照官方文档\"><a href=\"#其他配置参照官方文档\" class=\"headerlink\" title=\"其他配置参照官方文档\"></a>其他配置参照<a href=\"https://github.com/chenshuai2144/openapi2typescript\">官方文档</a></h5>"},{"title":"hexo 插件开发流程以及推送至hexo官方列表","date":"2024-06-23T06:11:49.000Z","_content":"\n### Hexo插件分类\n\n|  插件类别  |                           插件作用                           |\n| :--------: | :----------------------------------------------------------: |\n|  渲染插件  | 界面渲染逻辑处理，例如：`hexo-renderer-ejs`、`hexo-renderer-pug` |\n|  部署插件  |                         静态文件发布                         |\n|  分析插件  |              数据分析：例如文章字数、阅读时间等              |\n|  SEO插件   |                       搜素引擎优化插件                       |\n| 生成器插件 |       生成特定的页面或者文件：例如标签页面、分类页面等       |\n| 过滤器插件 | 过滤器插件在 Hexo 的生命周期的各个阶段对内容进行处理。例如，添加代码高亮、处理图片等。 |\n|  显示插件  | 显示插件提供辅助功能，通常用于模板或布局中，例如生成导航菜单、分页等。 |\n|  模版插件  |    模板插件提供主题和样式相关的功能，帮助美化博客的外观。    |\n|  扩展插件  |  扩展插件增加或修改 Hexo 的核心功能，提供额外的特性和功能。  |\n|  数据插件  | 数据插件用于处理外部数据源，例如从数据库或 API 获取数据，并在博客中展示。 |\n\n#### Hexo插件使用\n\n##### 安装插件\n\n```shell\nnpm i hexo-create-issues\n```\n\n##### 配置插件\n\n```yml\n# _config.yml 文件\nplugins:\n  - hexo-create-issues # 你想要使用的插件名，需要安装依赖后使用\n```\n\n#### Hexo插件开发\n\n> Tips 1: 建议使用commonjs方式编写，新的一些package大都是esmodule编写，commonjs中引入需要动态导入import()\n\n> Tips 2: Hexo 插件需要以`hexo-`前缀开头，同时不能重名\n\n##### 脚本模式开发\n\n1. hexo工程目录下新建scripts文件夹\n2. 根据需求编写对应脚本\n\n##### npm包形式开发\n\n1. 新建项目，按照npm包开发流程即可\n\n2. 项目依赖安装，其他需要的依赖自行安装，hexo是必须的\n\n   ```shell\n   npm install hexo\n   ```\n\n3. 根据需求编写脚本\n\n   * `hexo.on()` 可以监听hexo执行的生命周期钩子，可以编写相关逻辑\n\n   * `hexo.config`可以获取`_config.yml`中的所有配置项，逻辑中可以调用获取\n\n 4. 本地联调：建议使用`yalc`，具体使用方式可以参考博主的这篇文章，[yalc使用](https://promonkeyli.github.io)\n\n1. 调试完成，发布至npm\n\n   ```shell\n   npm login\n   npm publish\n   ```\n\n2. 项目中使用：安装发布的npm包后，_config.yml中再配置一下即可(`plugins`以及所需`变量`配置)\n\n#### Hexo插件发布至hexo列表\n\n1. 需要先发布npm包\n\n2. 然后fork [hexojs/site](https://github.com/hexojs/site)\n\n3. clone fork后的仓库到本地\n\n4. 在clone后的项目中的`source/_data/plugins/` 中创建一个新的 yaml 文件，使用您的插件名称作为文件名\n\n5. 编辑yaml文件，按需求录入以下内容\n\n   ```yaml\n   description: Server module for Hexo.\n   link: https://github.com/hexojs/hexo-server\n   tags:\n     - official\n     - server\n     - console\n   ```\n\n6. push修改，再向hexo site官方提交一个pull request，请注意提交的commit msg格式规范\n","source":"_posts/hexo-插件开发流程以及推送至hexo官方列表.md","raw":"---\ntitle: hexo 插件开发流程以及推送至hexo官方列表\ntags:\n  - hexo\n  - plugins\ncategories:\n  - hexo\ndate: 2024-06-23 14:11:49\n---\n\n### Hexo插件分类\n\n|  插件类别  |                           插件作用                           |\n| :--------: | :----------------------------------------------------------: |\n|  渲染插件  | 界面渲染逻辑处理，例如：`hexo-renderer-ejs`、`hexo-renderer-pug` |\n|  部署插件  |                         静态文件发布                         |\n|  分析插件  |              数据分析：例如文章字数、阅读时间等              |\n|  SEO插件   |                       搜素引擎优化插件                       |\n| 生成器插件 |       生成特定的页面或者文件：例如标签页面、分类页面等       |\n| 过滤器插件 | 过滤器插件在 Hexo 的生命周期的各个阶段对内容进行处理。例如，添加代码高亮、处理图片等。 |\n|  显示插件  | 显示插件提供辅助功能，通常用于模板或布局中，例如生成导航菜单、分页等。 |\n|  模版插件  |    模板插件提供主题和样式相关的功能，帮助美化博客的外观。    |\n|  扩展插件  |  扩展插件增加或修改 Hexo 的核心功能，提供额外的特性和功能。  |\n|  数据插件  | 数据插件用于处理外部数据源，例如从数据库或 API 获取数据，并在博客中展示。 |\n\n#### Hexo插件使用\n\n##### 安装插件\n\n```shell\nnpm i hexo-create-issues\n```\n\n##### 配置插件\n\n```yml\n# _config.yml 文件\nplugins:\n  - hexo-create-issues # 你想要使用的插件名，需要安装依赖后使用\n```\n\n#### Hexo插件开发\n\n> Tips 1: 建议使用commonjs方式编写，新的一些package大都是esmodule编写，commonjs中引入需要动态导入import()\n\n> Tips 2: Hexo 插件需要以`hexo-`前缀开头，同时不能重名\n\n##### 脚本模式开发\n\n1. hexo工程目录下新建scripts文件夹\n2. 根据需求编写对应脚本\n\n##### npm包形式开发\n\n1. 新建项目，按照npm包开发流程即可\n\n2. 项目依赖安装，其他需要的依赖自行安装，hexo是必须的\n\n   ```shell\n   npm install hexo\n   ```\n\n3. 根据需求编写脚本\n\n   * `hexo.on()` 可以监听hexo执行的生命周期钩子，可以编写相关逻辑\n\n   * `hexo.config`可以获取`_config.yml`中的所有配置项，逻辑中可以调用获取\n\n 4. 本地联调：建议使用`yalc`，具体使用方式可以参考博主的这篇文章，[yalc使用](https://promonkeyli.github.io)\n\n1. 调试完成，发布至npm\n\n   ```shell\n   npm login\n   npm publish\n   ```\n\n2. 项目中使用：安装发布的npm包后，_config.yml中再配置一下即可(`plugins`以及所需`变量`配置)\n\n#### Hexo插件发布至hexo列表\n\n1. 需要先发布npm包\n\n2. 然后fork [hexojs/site](https://github.com/hexojs/site)\n\n3. clone fork后的仓库到本地\n\n4. 在clone后的项目中的`source/_data/plugins/` 中创建一个新的 yaml 文件，使用您的插件名称作为文件名\n\n5. 编辑yaml文件，按需求录入以下内容\n\n   ```yaml\n   description: Server module for Hexo.\n   link: https://github.com/hexojs/hexo-server\n   tags:\n     - official\n     - server\n     - console\n   ```\n\n6. push修改，再向hexo site官方提交一个pull request，请注意提交的commit msg格式规范\n","slug":"hexo-插件开发流程以及推送至hexo官方列表","published":1,"updated":"2024-06-23T07:27:48.223Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdp00092j9k0zyudly7","content":"<h3 id=\"Hexo插件分类\"><a href=\"#Hexo插件分类\" class=\"headerlink\" title=\"Hexo插件分类\"></a>Hexo插件分类</h3><table>\n<thead>\n<tr>\n<th align=\"center\">插件类别</th>\n<th align=\"center\">插件作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">渲染插件</td>\n<td align=\"center\">界面渲染逻辑处理，例如：<code>hexo-renderer-ejs</code>、<code>hexo-renderer-pug</code></td>\n</tr>\n<tr>\n<td align=\"center\">部署插件</td>\n<td align=\"center\">静态文件发布</td>\n</tr>\n<tr>\n<td align=\"center\">分析插件</td>\n<td align=\"center\">数据分析：例如文章字数、阅读时间等</td>\n</tr>\n<tr>\n<td align=\"center\">SEO插件</td>\n<td align=\"center\">搜素引擎优化插件</td>\n</tr>\n<tr>\n<td align=\"center\">生成器插件</td>\n<td align=\"center\">生成特定的页面或者文件：例如标签页面、分类页面等</td>\n</tr>\n<tr>\n<td align=\"center\">过滤器插件</td>\n<td align=\"center\">过滤器插件在 Hexo 的生命周期的各个阶段对内容进行处理。例如，添加代码高亮、处理图片等。</td>\n</tr>\n<tr>\n<td align=\"center\">显示插件</td>\n<td align=\"center\">显示插件提供辅助功能，通常用于模板或布局中，例如生成导航菜单、分页等。</td>\n</tr>\n<tr>\n<td align=\"center\">模版插件</td>\n<td align=\"center\">模板插件提供主题和样式相关的功能，帮助美化博客的外观。</td>\n</tr>\n<tr>\n<td align=\"center\">扩展插件</td>\n<td align=\"center\">扩展插件增加或修改 Hexo 的核心功能，提供额外的特性和功能。</td>\n</tr>\n<tr>\n<td align=\"center\">数据插件</td>\n<td align=\"center\">数据插件用于处理外部数据源，例如从数据库或 API 获取数据，并在博客中展示。</td>\n</tr>\n</tbody></table>\n<h4 id=\"Hexo插件使用\"><a href=\"#Hexo插件使用\" class=\"headerlink\" title=\"Hexo插件使用\"></a>Hexo插件使用</h4><h5 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i hexo-create-issues</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h5><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml 文件</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo-create-issues</span> <span class=\"comment\"># 你想要使用的插件名，需要安装依赖后使用</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Hexo插件开发\"><a href=\"#Hexo插件开发\" class=\"headerlink\" title=\"Hexo插件开发\"></a>Hexo插件开发</h4><blockquote>\n<p>Tips 1: 建议使用commonjs方式编写，新的一些package大都是esmodule编写，commonjs中引入需要动态导入import()</p>\n</blockquote>\n<blockquote>\n<p>Tips 2: Hexo 插件需要以<code>hexo-</code>前缀开头，同时不能重名</p>\n</blockquote>\n<h5 id=\"脚本模式开发\"><a href=\"#脚本模式开发\" class=\"headerlink\" title=\"脚本模式开发\"></a>脚本模式开发</h5><ol>\n<li>hexo工程目录下新建scripts文件夹</li>\n<li>根据需求编写对应脚本</li>\n</ol>\n<h5 id=\"npm包形式开发\"><a href=\"#npm包形式开发\" class=\"headerlink\" title=\"npm包形式开发\"></a>npm包形式开发</h5><ol>\n<li><p>新建项目，按照npm包开发流程即可</p>\n</li>\n<li><p>项目依赖安装，其他需要的依赖自行安装，hexo是必须的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据需求编写脚本</p>\n<ul>\n<li><p><code>hexo.on()</code> 可以监听hexo执行的生命周期钩子，可以编写相关逻辑</p>\n</li>\n<li><p><code>hexo.config</code>可以获取<code>_config.yml</code>中的所有配置项，逻辑中可以调用获取</p>\n</li>\n</ul>\n</li>\n<li><p>本地联调：建议使用<code>yalc</code>，具体使用方式可以参考博主的这篇文章，<a href=\"https://promonkeyli.github.io/\">yalc使用</a></p>\n</li>\n<li><p>调试完成，发布至npm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm login</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目中使用：安装发布的npm包后，_config.yml中再配置一下即可(<code>plugins</code>以及所需<code>变量</code>配置)</p>\n</li>\n</ol>\n<h4 id=\"Hexo插件发布至hexo列表\"><a href=\"#Hexo插件发布至hexo列表\" class=\"headerlink\" title=\"Hexo插件发布至hexo列表\"></a>Hexo插件发布至hexo列表</h4><ol>\n<li><p>需要先发布npm包</p>\n</li>\n<li><p>然后fork <a href=\"https://github.com/hexojs/site\">hexojs&#x2F;site</a></p>\n</li>\n<li><p>clone fork后的仓库到本地</p>\n</li>\n<li><p>在clone后的项目中的<code>source/_data/plugins/</code> 中创建一个新的 yaml 文件，使用您的插件名称作为文件名</p>\n</li>\n<li><p>编辑yaml文件，按需求录入以下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">Server</span> <span class=\"string\">module</span> <span class=\"string\">for</span> <span class=\"string\">Hexo.</span></span><br><span class=\"line\"><span class=\"attr\">link:</span> <span class=\"string\">https://github.com/hexojs/hexo-server</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">official</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">server</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>push修改，再向hexo site官方提交一个pull request，请注意提交的commit msg格式规范</p>\n</li>\n</ol>\n","related_posts":[],"excerpt":"","more":"<h3 id=\"Hexo插件分类\"><a href=\"#Hexo插件分类\" class=\"headerlink\" title=\"Hexo插件分类\"></a>Hexo插件分类</h3><table>\n<thead>\n<tr>\n<th align=\"center\">插件类别</th>\n<th align=\"center\">插件作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">渲染插件</td>\n<td align=\"center\">界面渲染逻辑处理，例如：<code>hexo-renderer-ejs</code>、<code>hexo-renderer-pug</code></td>\n</tr>\n<tr>\n<td align=\"center\">部署插件</td>\n<td align=\"center\">静态文件发布</td>\n</tr>\n<tr>\n<td align=\"center\">分析插件</td>\n<td align=\"center\">数据分析：例如文章字数、阅读时间等</td>\n</tr>\n<tr>\n<td align=\"center\">SEO插件</td>\n<td align=\"center\">搜素引擎优化插件</td>\n</tr>\n<tr>\n<td align=\"center\">生成器插件</td>\n<td align=\"center\">生成特定的页面或者文件：例如标签页面、分类页面等</td>\n</tr>\n<tr>\n<td align=\"center\">过滤器插件</td>\n<td align=\"center\">过滤器插件在 Hexo 的生命周期的各个阶段对内容进行处理。例如，添加代码高亮、处理图片等。</td>\n</tr>\n<tr>\n<td align=\"center\">显示插件</td>\n<td align=\"center\">显示插件提供辅助功能，通常用于模板或布局中，例如生成导航菜单、分页等。</td>\n</tr>\n<tr>\n<td align=\"center\">模版插件</td>\n<td align=\"center\">模板插件提供主题和样式相关的功能，帮助美化博客的外观。</td>\n</tr>\n<tr>\n<td align=\"center\">扩展插件</td>\n<td align=\"center\">扩展插件增加或修改 Hexo 的核心功能，提供额外的特性和功能。</td>\n</tr>\n<tr>\n<td align=\"center\">数据插件</td>\n<td align=\"center\">数据插件用于处理外部数据源，例如从数据库或 API 获取数据，并在博客中展示。</td>\n</tr>\n</tbody></table>\n<h4 id=\"Hexo插件使用\"><a href=\"#Hexo插件使用\" class=\"headerlink\" title=\"Hexo插件使用\"></a>Hexo插件使用</h4><h5 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i hexo-create-issues</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h5><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml 文件</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">hexo-create-issues</span> <span class=\"comment\"># 你想要使用的插件名，需要安装依赖后使用</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Hexo插件开发\"><a href=\"#Hexo插件开发\" class=\"headerlink\" title=\"Hexo插件开发\"></a>Hexo插件开发</h4><blockquote>\n<p>Tips 1: 建议使用commonjs方式编写，新的一些package大都是esmodule编写，commonjs中引入需要动态导入import()</p>\n</blockquote>\n<blockquote>\n<p>Tips 2: Hexo 插件需要以<code>hexo-</code>前缀开头，同时不能重名</p>\n</blockquote>\n<h5 id=\"脚本模式开发\"><a href=\"#脚本模式开发\" class=\"headerlink\" title=\"脚本模式开发\"></a>脚本模式开发</h5><ol>\n<li>hexo工程目录下新建scripts文件夹</li>\n<li>根据需求编写对应脚本</li>\n</ol>\n<h5 id=\"npm包形式开发\"><a href=\"#npm包形式开发\" class=\"headerlink\" title=\"npm包形式开发\"></a>npm包形式开发</h5><ol>\n<li><p>新建项目，按照npm包开发流程即可</p>\n</li>\n<li><p>项目依赖安装，其他需要的依赖自行安装，hexo是必须的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据需求编写脚本</p>\n<ul>\n<li><p><code>hexo.on()</code> 可以监听hexo执行的生命周期钩子，可以编写相关逻辑</p>\n</li>\n<li><p><code>hexo.config</code>可以获取<code>_config.yml</code>中的所有配置项，逻辑中可以调用获取</p>\n</li>\n</ul>\n</li>\n<li><p>本地联调：建议使用<code>yalc</code>，具体使用方式可以参考博主的这篇文章，<a href=\"https://promonkeyli.github.io/\">yalc使用</a></p>\n</li>\n<li><p>调试完成，发布至npm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm login</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目中使用：安装发布的npm包后，_config.yml中再配置一下即可(<code>plugins</code>以及所需<code>变量</code>配置)</p>\n</li>\n</ol>\n<h4 id=\"Hexo插件发布至hexo列表\"><a href=\"#Hexo插件发布至hexo列表\" class=\"headerlink\" title=\"Hexo插件发布至hexo列表\"></a>Hexo插件发布至hexo列表</h4><ol>\n<li><p>需要先发布npm包</p>\n</li>\n<li><p>然后fork <a href=\"https://github.com/hexojs/site\">hexojs&#x2F;site</a></p>\n</li>\n<li><p>clone fork后的仓库到本地</p>\n</li>\n<li><p>在clone后的项目中的<code>source/_data/plugins/</code> 中创建一个新的 yaml 文件，使用您的插件名称作为文件名</p>\n</li>\n<li><p>编辑yaml文件，按需求录入以下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">Server</span> <span class=\"string\">module</span> <span class=\"string\">for</span> <span class=\"string\">Hexo.</span></span><br><span class=\"line\"><span class=\"attr\">link:</span> <span class=\"string\">https://github.com/hexojs/hexo-server</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">official</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">server</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">console</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>push修改，再向hexo site官方提交一个pull request，请注意提交的commit msg格式规范</p>\n</li>\n</ol>\n"},{"title":"go项目目录结构规划","date":"2024-06-15T08:26:18.000Z","_content":"\n#### [golang社区规范](https://github.com/golang-standards/project-layout)\n\n#### 目录结构说明\n\n```she\n/your_project\n├── cmd\n│   └── your_project\n│       └── main.go       # 主程序入口\n├── configs\n│   └── config.yaml       # 配置文件\n├── internal              # 内部应用代码（不可导出）\n│   ├── app\n│   │   ├── controllers   # 控制器层\n│   │   ├── models        # 数据模型层\n│   │   ├── services      # 业务逻辑层\n│   │   └── repositories  # 数据访问层\n│   ├── pkg\n│   │   ├── logger        # 日志包\n│   │   └── middleware    # 中间件\n│   └── routes            # 路由定义\n├── pkg                   # 可重用的包\n│   ├── util              # 通用工具包\n│   └── ginutil           # Gin 相关工具\n├── scripts               # 脚本文件（如数据库迁移、初始化等）\n├── test                  # 测试文件\n├── go.mod                # Go modules 依赖管理\n└── go.sum                # Go modules 依赖管理\n```\n\n#### 示例\n\n```shel\ngithub.com/your_username/your_project\n├── cmd\n│   └── your_project\n│       └── main.go\n├── configs\n│   └── config.yaml\n├── internal\n│   ├── app\n│   │   ├── controllers\n│   │   │   └── user_controller.go\n│   │   ├── models\n│   │   │   └── user.go\n│   │   ├── services\n│   │   │   └── user_service.go\n│   │   └── repositories\n│   │       └── user_repository.go\n│   ├── pkg\n│   │   ├── logger\n│   │   │   └── logger.go\n│   │   └── middleware\n│   │       └── auth_middleware.go\n│   └── routes\n│       └── router.go\n├── pkg\n│   ├── util\n│   │   └── util.go\n│   └── ginutil\n│       └── ginutil.go\n├── scripts\n│   └── migrate.sh\n├── test\n│   └── user_test.go\n├── go.mod\n└── go.sum\n\n```\n\n","source":"_posts/go项目目录结构规划.md","raw":"---\ntitle: go项目目录结构规划\ntags:\n  - go\ncategories:\n  - go\ndate: 2024-06-15 16:26:18\n---\n\n#### [golang社区规范](https://github.com/golang-standards/project-layout)\n\n#### 目录结构说明\n\n```she\n/your_project\n├── cmd\n│   └── your_project\n│       └── main.go       # 主程序入口\n├── configs\n│   └── config.yaml       # 配置文件\n├── internal              # 内部应用代码（不可导出）\n│   ├── app\n│   │   ├── controllers   # 控制器层\n│   │   ├── models        # 数据模型层\n│   │   ├── services      # 业务逻辑层\n│   │   └── repositories  # 数据访问层\n│   ├── pkg\n│   │   ├── logger        # 日志包\n│   │   └── middleware    # 中间件\n│   └── routes            # 路由定义\n├── pkg                   # 可重用的包\n│   ├── util              # 通用工具包\n│   └── ginutil           # Gin 相关工具\n├── scripts               # 脚本文件（如数据库迁移、初始化等）\n├── test                  # 测试文件\n├── go.mod                # Go modules 依赖管理\n└── go.sum                # Go modules 依赖管理\n```\n\n#### 示例\n\n```shel\ngithub.com/your_username/your_project\n├── cmd\n│   └── your_project\n│       └── main.go\n├── configs\n│   └── config.yaml\n├── internal\n│   ├── app\n│   │   ├── controllers\n│   │   │   └── user_controller.go\n│   │   ├── models\n│   │   │   └── user.go\n│   │   ├── services\n│   │   │   └── user_service.go\n│   │   └── repositories\n│   │       └── user_repository.go\n│   ├── pkg\n│   │   ├── logger\n│   │   │   └── logger.go\n│   │   └── middleware\n│   │       └── auth_middleware.go\n│   └── routes\n│       └── router.go\n├── pkg\n│   ├── util\n│   │   └── util.go\n│   └── ginutil\n│       └── ginutil.go\n├── scripts\n│   └── migrate.sh\n├── test\n│   └── user_test.go\n├── go.mod\n└── go.sum\n\n```\n\n","slug":"go项目目录结构规划","published":1,"updated":"2024-06-15T08:31:11.020Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdq000a2j9kgeuc678z","content":"<h4 id=\"golang社区规范\"><a href=\"#golang社区规范\" class=\"headerlink\" title=\"golang社区规范\"></a><a href=\"https://github.com/golang-standards/project-layout\">golang社区规范</a></h4><h4 id=\"目录结构说明\"><a href=\"#目录结构说明\" class=\"headerlink\" title=\"目录结构说明\"></a>目录结构说明</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/your_project</span><br><span class=\"line\">├── cmd</span><br><span class=\"line\">│   └── your_project</span><br><span class=\"line\">│       └── main.go       # 主程序入口</span><br><span class=\"line\">├── configs</span><br><span class=\"line\">│   └── config.yaml       # 配置文件</span><br><span class=\"line\">├── internal              # 内部应用代码（不可导出）</span><br><span class=\"line\">│   ├── app</span><br><span class=\"line\">│   │   ├── controllers   # 控制器层</span><br><span class=\"line\">│   │   ├── models        # 数据模型层</span><br><span class=\"line\">│   │   ├── services      # 业务逻辑层</span><br><span class=\"line\">│   │   └── repositories  # 数据访问层</span><br><span class=\"line\">│   ├── pkg</span><br><span class=\"line\">│   │   ├── logger        # 日志包</span><br><span class=\"line\">│   │   └── middleware    # 中间件</span><br><span class=\"line\">│   └── routes            # 路由定义</span><br><span class=\"line\">├── pkg                   # 可重用的包</span><br><span class=\"line\">│   ├── util              # 通用工具包</span><br><span class=\"line\">│   └── ginutil           # Gin 相关工具</span><br><span class=\"line\">├── scripts               # 脚本文件（如数据库迁移、初始化等）</span><br><span class=\"line\">├── test                  # 测试文件</span><br><span class=\"line\">├── go.mod                # Go modules 依赖管理</span><br><span class=\"line\">└── go.sum                # Go modules 依赖管理</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">github.com/your_username/your_project</span><br><span class=\"line\">├── cmd</span><br><span class=\"line\">│   └── your_project</span><br><span class=\"line\">│       └── main.go</span><br><span class=\"line\">├── configs</span><br><span class=\"line\">│   └── config.yaml</span><br><span class=\"line\">├── internal</span><br><span class=\"line\">│   ├── app</span><br><span class=\"line\">│   │   ├── controllers</span><br><span class=\"line\">│   │   │   └── user_controller.go</span><br><span class=\"line\">│   │   ├── models</span><br><span class=\"line\">│   │   │   └── user.go</span><br><span class=\"line\">│   │   ├── services</span><br><span class=\"line\">│   │   │   └── user_service.go</span><br><span class=\"line\">│   │   └── repositories</span><br><span class=\"line\">│   │       └── user_repository.go</span><br><span class=\"line\">│   ├── pkg</span><br><span class=\"line\">│   │   ├── logger</span><br><span class=\"line\">│   │   │   └── logger.go</span><br><span class=\"line\">│   │   └── middleware</span><br><span class=\"line\">│   │       └── auth_middleware.go</span><br><span class=\"line\">│   └── routes</span><br><span class=\"line\">│       └── router.go</span><br><span class=\"line\">├── pkg</span><br><span class=\"line\">│   ├── util</span><br><span class=\"line\">│   │   └── util.go</span><br><span class=\"line\">│   └── ginutil</span><br><span class=\"line\">│       └── ginutil.go</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">│   └── migrate.sh</span><br><span class=\"line\">├── test</span><br><span class=\"line\">│   └── user_test.go</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">└── go.sum</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","related_posts":[],"excerpt":"","more":"<h4 id=\"golang社区规范\"><a href=\"#golang社区规范\" class=\"headerlink\" title=\"golang社区规范\"></a><a href=\"https://github.com/golang-standards/project-layout\">golang社区规范</a></h4><h4 id=\"目录结构说明\"><a href=\"#目录结构说明\" class=\"headerlink\" title=\"目录结构说明\"></a>目录结构说明</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/your_project</span><br><span class=\"line\">├── cmd</span><br><span class=\"line\">│   └── your_project</span><br><span class=\"line\">│       └── main.go       # 主程序入口</span><br><span class=\"line\">├── configs</span><br><span class=\"line\">│   └── config.yaml       # 配置文件</span><br><span class=\"line\">├── internal              # 内部应用代码（不可导出）</span><br><span class=\"line\">│   ├── app</span><br><span class=\"line\">│   │   ├── controllers   # 控制器层</span><br><span class=\"line\">│   │   ├── models        # 数据模型层</span><br><span class=\"line\">│   │   ├── services      # 业务逻辑层</span><br><span class=\"line\">│   │   └── repositories  # 数据访问层</span><br><span class=\"line\">│   ├── pkg</span><br><span class=\"line\">│   │   ├── logger        # 日志包</span><br><span class=\"line\">│   │   └── middleware    # 中间件</span><br><span class=\"line\">│   └── routes            # 路由定义</span><br><span class=\"line\">├── pkg                   # 可重用的包</span><br><span class=\"line\">│   ├── util              # 通用工具包</span><br><span class=\"line\">│   └── ginutil           # Gin 相关工具</span><br><span class=\"line\">├── scripts               # 脚本文件（如数据库迁移、初始化等）</span><br><span class=\"line\">├── test                  # 测试文件</span><br><span class=\"line\">├── go.mod                # Go modules 依赖管理</span><br><span class=\"line\">└── go.sum                # Go modules 依赖管理</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">github.com/your_username/your_project</span><br><span class=\"line\">├── cmd</span><br><span class=\"line\">│   └── your_project</span><br><span class=\"line\">│       └── main.go</span><br><span class=\"line\">├── configs</span><br><span class=\"line\">│   └── config.yaml</span><br><span class=\"line\">├── internal</span><br><span class=\"line\">│   ├── app</span><br><span class=\"line\">│   │   ├── controllers</span><br><span class=\"line\">│   │   │   └── user_controller.go</span><br><span class=\"line\">│   │   ├── models</span><br><span class=\"line\">│   │   │   └── user.go</span><br><span class=\"line\">│   │   ├── services</span><br><span class=\"line\">│   │   │   └── user_service.go</span><br><span class=\"line\">│   │   └── repositories</span><br><span class=\"line\">│   │       └── user_repository.go</span><br><span class=\"line\">│   ├── pkg</span><br><span class=\"line\">│   │   ├── logger</span><br><span class=\"line\">│   │   │   └── logger.go</span><br><span class=\"line\">│   │   └── middleware</span><br><span class=\"line\">│   │       └── auth_middleware.go</span><br><span class=\"line\">│   └── routes</span><br><span class=\"line\">│       └── router.go</span><br><span class=\"line\">├── pkg</span><br><span class=\"line\">│   ├── util</span><br><span class=\"line\">│   │   └── util.go</span><br><span class=\"line\">│   └── ginutil</span><br><span class=\"line\">│       └── ginutil.go</span><br><span class=\"line\">├── scripts</span><br><span class=\"line\">│   └── migrate.sh</span><br><span class=\"line\">├── test</span><br><span class=\"line\">│   └── user_test.go</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">└── go.sum</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":".editorconfig文件详解","date":"2024-06-08T05:33:03.000Z","_content":"\n#### [editorconfig](https://editorconfig.org/) 作用\n\n> 让同一项目在不同编辑器下格式保持一致（例如：缩进、换行符等）\n\n#### 原理\n\n> 支持的编辑器在打开项目时会读取该文件，应用到代码中，同时与版本控制完美契合\n\n#### 配置内容解读\n\n```\n# 顶级 EditorConfig 文件\nroot = true\n\n# Unix 风格的换行符，并在每个文件末尾添加一个换行符\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n# 使用大括号扩展符号匹配多个文件\n# 设置默认字符集\n[*.{js,py}]\ncharset = utf-8\n\n# 使用 4 个空格缩进\n[*.py]\nindent_style = space\nindent_size = 4\n\n# 使用制表符缩进（未指定大小）\n[Makefile]\nindent_style = tab\n\n# 重写 lib 目录下所有 JS 文件的缩进\n[lib/**.js]\nindent_style = space\nindent_size = 2\n\n# 精确匹配 package.json 或 .travis.yml 文件\n[{package.json,.travis.yml}]\nindent_style = space\nindent_size = 2\n\n```\n","source":"_posts/editorconfig文件详解.md","raw":"---\ntitle: .editorconfig文件详解\ntags:\n  - editor\ncategories:\n  - tools\ndate: 2024-06-08 13:33:03\n---\n\n#### [editorconfig](https://editorconfig.org/) 作用\n\n> 让同一项目在不同编辑器下格式保持一致（例如：缩进、换行符等）\n\n#### 原理\n\n> 支持的编辑器在打开项目时会读取该文件，应用到代码中，同时与版本控制完美契合\n\n#### 配置内容解读\n\n```\n# 顶级 EditorConfig 文件\nroot = true\n\n# Unix 风格的换行符，并在每个文件末尾添加一个换行符\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n# 使用大括号扩展符号匹配多个文件\n# 设置默认字符集\n[*.{js,py}]\ncharset = utf-8\n\n# 使用 4 个空格缩进\n[*.py]\nindent_style = space\nindent_size = 4\n\n# 使用制表符缩进（未指定大小）\n[Makefile]\nindent_style = tab\n\n# 重写 lib 目录下所有 JS 文件的缩进\n[lib/**.js]\nindent_style = space\nindent_size = 2\n\n# 精确匹配 package.json 或 .travis.yml 文件\n[{package.json,.travis.yml}]\nindent_style = space\nindent_size = 2\n\n```\n","slug":"editorconfig文件详解","published":1,"updated":"2024-06-08T05:54:13.537Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdr000e2j9kdwt7h9yy","content":"<h4 id=\"editorconfig-作用\"><a href=\"#editorconfig-作用\" class=\"headerlink\" title=\"editorconfig 作用\"></a><a href=\"https://editorconfig.org/\">editorconfig</a> 作用</h4><blockquote>\n<p>让同一项目在不同编辑器下格式保持一致（例如：缩进、换行符等）</p>\n</blockquote>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><blockquote>\n<p>支持的编辑器在打开项目时会读取该文件，应用到代码中，同时与版本控制完美契合</p>\n</blockquote>\n<h4 id=\"配置内容解读\"><a href=\"#配置内容解读\" class=\"headerlink\" title=\"配置内容解读\"></a>配置内容解读</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 顶级 EditorConfig 文件</span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\"># Unix 风格的换行符，并在每个文件末尾添加一个换行符</span><br><span class=\"line\">[*]</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用大括号扩展符号匹配多个文件</span><br><span class=\"line\"># 设置默认字符集</span><br><span class=\"line\">[*.&#123;js,py&#125;]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 4 个空格缩进</span><br><span class=\"line\">[*.py]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 4</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用制表符缩进（未指定大小）</span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br><span class=\"line\"></span><br><span class=\"line\"># 重写 lib 目录下所有 JS 文件的缩进</span><br><span class=\"line\">[lib/**.js]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 精确匹配 package.json 或 .travis.yml 文件</span><br><span class=\"line\">[&#123;package.json,.travis.yml&#125;]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","related_posts":[],"excerpt":"","more":"<h4 id=\"editorconfig-作用\"><a href=\"#editorconfig-作用\" class=\"headerlink\" title=\"editorconfig 作用\"></a><a href=\"https://editorconfig.org/\">editorconfig</a> 作用</h4><blockquote>\n<p>让同一项目在不同编辑器下格式保持一致（例如：缩进、换行符等）</p>\n</blockquote>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><blockquote>\n<p>支持的编辑器在打开项目时会读取该文件，应用到代码中，同时与版本控制完美契合</p>\n</blockquote>\n<h4 id=\"配置内容解读\"><a href=\"#配置内容解读\" class=\"headerlink\" title=\"配置内容解读\"></a>配置内容解读</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 顶级 EditorConfig 文件</span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\"># Unix 风格的换行符，并在每个文件末尾添加一个换行符</span><br><span class=\"line\">[*]</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用大括号扩展符号匹配多个文件</span><br><span class=\"line\"># 设置默认字符集</span><br><span class=\"line\">[*.&#123;js,py&#125;]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 4 个空格缩进</span><br><span class=\"line\">[*.py]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 4</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用制表符缩进（未指定大小）</span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br><span class=\"line\"></span><br><span class=\"line\"># 重写 lib 目录下所有 JS 文件的缩进</span><br><span class=\"line\">[lib/**.js]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\"># 精确匹配 package.json 或 .travis.yml 文件</span><br><span class=\"line\">[&#123;package.json,.travis.yml&#125;]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"ubuntu安装docker","date":"2024-05-24T01:29:29.000Z","_content":"\n#### 查看是否安装wget\n```shell\nwhich wget\n```\n#### 没有安装，升级包管理器再安装\n```shell\nsudo apt-get update\nsudo apt-get install wget\n```\n#### 安装docker\n```shell\nwget -qO- https://get.docker.com/ | sh\n```\n#### 验证是否安装成功\n```shell\nsudo docker run hello-world\n```","source":"_posts/linux安装docker.md","raw":"---\ntitle: ubuntu安装docker\ntags:\n  - docker\n  - linux\n  - ubuntu\ncategories:\n  - docker\ndate: 2024-05-24 09:29:29\n---\n\n#### 查看是否安装wget\n```shell\nwhich wget\n```\n#### 没有安装，升级包管理器再安装\n```shell\nsudo apt-get update\nsudo apt-get install wget\n```\n#### 安装docker\n```shell\nwget -qO- https://get.docker.com/ | sh\n```\n#### 验证是否安装成功\n```shell\nsudo docker run hello-world\n```","slug":"linux安装docker","published":1,"updated":"2024-05-30T06:16:14.735Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdw001c2j9k7c9if02k","content":"<h4 id=\"查看是否安装wget\"><a href=\"#查看是否安装wget\" class=\"headerlink\" title=\"查看是否安装wget\"></a>查看是否安装wget</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">which wget</span><br></pre></td></tr></table></figure>\n<h4 id=\"没有安装，升级包管理器再安装\"><a href=\"#没有安装，升级包管理器再安装\" class=\"headerlink\" title=\"没有安装，升级包管理器再安装\"></a>没有安装，升级包管理器再安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install wget</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>","related_posts":[],"excerpt":"","more":"<h4 id=\"查看是否安装wget\"><a href=\"#查看是否安装wget\" class=\"headerlink\" title=\"查看是否安装wget\"></a>查看是否安装wget</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">which wget</span><br></pre></td></tr></table></figure>\n<h4 id=\"没有安装，升级包管理器再安装\"><a href=\"#没有安装，升级包管理器再安装\" class=\"headerlink\" title=\"没有安装，升级包管理器再安装\"></a>没有安装，升级包管理器再安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install wget</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>\n<h4 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run hello-world</span><br></pre></td></tr></table></figure>"},{"title":"使用yalc作为你的本地依赖管理工具","date":"2024-06-23T07:19:34.000Z","_content":"\n#### yalc介绍\n\n该工具用于本地包开发联调，以前常用的是`npm link`，但是npm link调试方式相对繁琐，yalc简直是本地开发包的神奇，简单高效\n\n#### yalc使用\n\n##### 全局安装\n\n```shell\nnpm i yalc -g\n```\n\n##### 使用\n\n1. `yalc publish` 开发的包下执行该命令，发布该依赖\n2. `yalc add X` 需要使用该包的项目中，添加需要调试的包\n3. `yalc push` 开发的包有更新的话，执行该命令，全局add了该包的项目都会更新包内容\n4. 更多：`yalc remove x` 可以移除不需要的包\n\n","source":"_posts/使用yalc作为你的本地依赖管理工具.md","raw":"---\ntitle: 使用yalc作为你的本地依赖管理工具\ntags:\n  - yalc\n  - npm\ncategories:\n  - npm\ndate: 2024-06-23 15:19:34\n---\n\n#### yalc介绍\n\n该工具用于本地包开发联调，以前常用的是`npm link`，但是npm link调试方式相对繁琐，yalc简直是本地开发包的神奇，简单高效\n\n#### yalc使用\n\n##### 全局安装\n\n```shell\nnpm i yalc -g\n```\n\n##### 使用\n\n1. `yalc publish` 开发的包下执行该命令，发布该依赖\n2. `yalc add X` 需要使用该包的项目中，添加需要调试的包\n3. `yalc push` 开发的包有更新的话，执行该命令，全局add了该包的项目都会更新包内容\n4. 更多：`yalc remove x` 可以移除不需要的包\n\n","slug":"使用yalc作为你的本地依赖管理工具","published":1,"updated":"2024-06-23T07:31:37.843Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdx001d2j9kauederrd","content":"<h4 id=\"yalc介绍\"><a href=\"#yalc介绍\" class=\"headerlink\" title=\"yalc介绍\"></a>yalc介绍</h4><p>该工具用于本地包开发联调，以前常用的是<code>npm link</code>，但是npm link调试方式相对繁琐，yalc简直是本地开发包的神奇，简单高效</p>\n<h4 id=\"yalc使用\"><a href=\"#yalc使用\" class=\"headerlink\" title=\"yalc使用\"></a>yalc使用</h4><h5 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i yalc -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><ol>\n<li><code>yalc publish</code> 开发的包下执行该命令，发布该依赖</li>\n<li><code>yalc add X</code> 需要使用该包的项目中，添加需要调试的包</li>\n<li><code>yalc push</code> 开发的包有更新的话，执行该命令，全局add了该包的项目都会更新包内容</li>\n<li>更多：<code>yalc remove x</code> 可以移除不需要的包</li>\n</ol>\n","related_posts":[],"excerpt":"","more":"<h4 id=\"yalc介绍\"><a href=\"#yalc介绍\" class=\"headerlink\" title=\"yalc介绍\"></a>yalc介绍</h4><p>该工具用于本地包开发联调，以前常用的是<code>npm link</code>，但是npm link调试方式相对繁琐，yalc简直是本地开发包的神奇，简单高效</p>\n<h4 id=\"yalc使用\"><a href=\"#yalc使用\" class=\"headerlink\" title=\"yalc使用\"></a>yalc使用</h4><h5 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i yalc -g</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><ol>\n<li><code>yalc publish</code> 开发的包下执行该命令，发布该依赖</li>\n<li><code>yalc add X</code> 需要使用该包的项目中，添加需要调试的包</li>\n<li><code>yalc push</code> 开发的包有更新的话，执行该命令，全局add了该包的项目都会更新包内容</li>\n<li>更多：<code>yalc remove x</code> 可以移除不需要的包</li>\n</ol>\n"},{"title":"腾讯云ubuntu服务器root用户初始化","date":"2024-05-30T06:14:31.000Z","_content":"\n> 注：腾讯云ubuntu安装过程默认不设置root用户名以及密码，需要手动开启root用户登录\n\n1. 使用初始化用户名密码（默认是ubuntu）登录云服务器\n2. 执行下面的命令，设置root密码\n\n```shell\nsudo passwd root\n```\n\n3. 执行下面的命令，修改ssh配置文件\n\n```shell\nsudo vim /etc/ssh/sshd_config\n```\n\n4. 按i切换到编辑模式，找到#Authentication，将PermitRootLogin 修改为yes，然后保存\n\n```shell\nPermitRootLogin yes # 默认值是 prohibit-password\n```\n\n5. 重启ssh服务后，root用户登录验证配置是否生效\n\n```shell\nsudo service ssh restart\n```\n\n","source":"_posts/腾讯云ubuntu服务器root用户初始化.md","raw":"---\ntitle: 腾讯云ubuntu服务器root用户初始化\ntags:\n  - linux\n  - ubuntu\ncategories:\n  - linux\ndate: 2024-05-30 14:14:31\n---\n\n> 注：腾讯云ubuntu安装过程默认不设置root用户名以及密码，需要手动开启root用户登录\n\n1. 使用初始化用户名密码（默认是ubuntu）登录云服务器\n2. 执行下面的命令，设置root密码\n\n```shell\nsudo passwd root\n```\n\n3. 执行下面的命令，修改ssh配置文件\n\n```shell\nsudo vim /etc/ssh/sshd_config\n```\n\n4. 按i切换到编辑模式，找到#Authentication，将PermitRootLogin 修改为yes，然后保存\n\n```shell\nPermitRootLogin yes # 默认值是 prohibit-password\n```\n\n5. 重启ssh服务后，root用户登录验证配置是否生效\n\n```shell\nsudo service ssh restart\n```\n\n","slug":"腾讯云ubuntu服务器root用户初始化","published":1,"updated":"2024-05-30T06:53:17.245Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdx001g2j9ke7jfgxtl","content":"<blockquote>\n<p>注：腾讯云ubuntu安装过程默认不设置root用户名以及密码，需要手动开启root用户登录</p>\n</blockquote>\n<ol>\n<li>使用初始化用户名密码（默认是ubuntu）登录云服务器</li>\n<li>执行下面的命令，设置root密码</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行下面的命令，修改ssh配置文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>按i切换到编辑模式，找到#Authentication，将PermitRootLogin 修改为yes，然后保存</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PermitRootLogin yes # 默认值是 prohibit-password</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>重启ssh服务后，root用户登录验证配置是否生效</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service ssh restart</span><br></pre></td></tr></table></figure>\n\n","related_posts":[],"excerpt":"","more":"<blockquote>\n<p>注：腾讯云ubuntu安装过程默认不设置root用户名以及密码，需要手动开启root用户登录</p>\n</blockquote>\n<ol>\n<li>使用初始化用户名密码（默认是ubuntu）登录云服务器</li>\n<li>执行下面的命令，设置root密码</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>执行下面的命令，修改ssh配置文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>按i切换到编辑模式，找到#Authentication，将PermitRootLogin 修改为yes，然后保存</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">PermitRootLogin yes # 默认值是 prohibit-password</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>重启ssh服务后，root用户登录验证配置是否生效</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service ssh restart</span><br></pre></td></tr></table></figure>\n\n"},{"title":"go语言中的导入与导出","date":"2024-06-10T04:42:21.000Z","_content":"\n#### 简介\n\n* ***go***语言中引入与导出是通过包机制实现的\n\n* ***package***是代码组织和封装的基本单位，每个Go文件都必须声明一个包，包名通常与所在目录名相同\n\n#### 导出\n\n* 标识符（变量、常量、类型、函数、结构体字段等））以大写字母开头则是导出，可以被其他包访问，小写只能内部访问\n\n* go语言中是区分大小写的\n\n* 例子如下：\n\n  ```go\n    var Con = \"\" // 外部可访问\n    var con = \"\" // 只有包内部可访问\n    \n    func Test(){} // 外部可访问\n    func test(){} // 只有包内部可访问\n  ```\n\n  \n#### 导入\n\n* 导入使用import关键字\n\n* 可以多行import单独导入，也可以分组导入，如下：\n\n  ```go\n  // 单独导入\n  import \"fmt\"\n  import \"math\"\n  \n  // 分组导入\n  import (\n      \"fmt\"\n      \"math\"\n  )\n  ```\n  \n\n* 别名导入（如果没有别名，默认的是取导入路径的最后一个单词作为包名，调用包内部暴露的标识）\n\n  ```go\n  // 1.别名导入\n  import f \"fmt\"\n  \n  func main() {\n      f.Println(\"Hello, world!\")\n  }\n  \n  // 2.默认导入\n  import (\n      \"myproject/packages/package1\"\n  )\n  \n  func main() {\n      package1.DoSomething()\n  }\n  \n  ```\n\n  \n","source":"_posts/go语言中的导入与导出.md","raw":"---\ntitle: go语言中的导入与导出\ntags:\n  - go\ncategories:\n  - go\ndate: 2024-06-10 12:42:21\n---\n\n#### 简介\n\n* ***go***语言中引入与导出是通过包机制实现的\n\n* ***package***是代码组织和封装的基本单位，每个Go文件都必须声明一个包，包名通常与所在目录名相同\n\n#### 导出\n\n* 标识符（变量、常量、类型、函数、结构体字段等））以大写字母开头则是导出，可以被其他包访问，小写只能内部访问\n\n* go语言中是区分大小写的\n\n* 例子如下：\n\n  ```go\n    var Con = \"\" // 外部可访问\n    var con = \"\" // 只有包内部可访问\n    \n    func Test(){} // 外部可访问\n    func test(){} // 只有包内部可访问\n  ```\n\n  \n#### 导入\n\n* 导入使用import关键字\n\n* 可以多行import单独导入，也可以分组导入，如下：\n\n  ```go\n  // 单独导入\n  import \"fmt\"\n  import \"math\"\n  \n  // 分组导入\n  import (\n      \"fmt\"\n      \"math\"\n  )\n  ```\n  \n\n* 别名导入（如果没有别名，默认的是取导入路径的最后一个单词作为包名，调用包内部暴露的标识）\n\n  ```go\n  // 1.别名导入\n  import f \"fmt\"\n  \n  func main() {\n      f.Println(\"Hello, world!\")\n  }\n  \n  // 2.默认导入\n  import (\n      \"myproject/packages/package1\"\n  )\n  \n  func main() {\n      package1.DoSomething()\n  }\n  \n  ```\n\n  \n","slug":"go语言中的导入与导出","published":1,"updated":"2024-06-10T05:20:57.097Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdx001h2j9ka8ciex5f","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li><p><em><strong>go</strong></em>语言中引入与导出是通过包机制实现的</p>\n</li>\n<li><p><em><strong>package</strong></em>是代码组织和封装的基本单位，每个Go文件都必须声明一个包，包名通常与所在目录名相同</p>\n</li>\n</ul>\n<h4 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h4><ul>\n<li><p>标识符（变量、常量、类型、函数、结构体字段等））以大写字母开头则是导出，可以被其他包访问，小写只能内部访问</p>\n</li>\n<li><p>go语言中是区分大小写的</p>\n</li>\n<li><p>例子如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Con = <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">// 外部可访问</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">// 只有包内部可访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">// 外部可访问</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">// 只有包内部可访问</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><ul>\n<li><p>导入使用import关键字</p>\n</li>\n<li><p>可以多行import单独导入，也可以分组导入，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单独导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分组导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>别名导入（如果没有别名，默认的是取导入路径的最后一个单词作为包名，调用包内部暴露的标识）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.别名导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> f <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    f.Println(<span class=\"string\">&quot;Hello, world!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.默认导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;myproject/packages/package1&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    package1.DoSomething()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","related_posts":[],"excerpt":"","more":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li><p><em><strong>go</strong></em>语言中引入与导出是通过包机制实现的</p>\n</li>\n<li><p><em><strong>package</strong></em>是代码组织和封装的基本单位，每个Go文件都必须声明一个包，包名通常与所在目录名相同</p>\n</li>\n</ul>\n<h4 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h4><ul>\n<li><p>标识符（变量、常量、类型、函数、结构体字段等））以大写字母开头则是导出，可以被其他包访问，小写只能内部访问</p>\n</li>\n<li><p>go语言中是区分大小写的</p>\n</li>\n<li><p>例子如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Con = <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">// 外部可访问</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> con = <span class=\"string\">&quot;&quot;</span> <span class=\"comment\">// 只有包内部可访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">// 外部可访问</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;&#125; <span class=\"comment\">// 只有包内部可访问</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><ul>\n<li><p>导入使用import关键字</p>\n</li>\n<li><p>可以多行import单独导入，也可以分组导入，如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单独导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分组导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>别名导入（如果没有别名，默认的是取导入路径的最后一个单词作为包名，调用包内部暴露的标识）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.别名导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> f <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    f.Println(<span class=\"string\">&quot;Hello, world!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.默认导入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;myproject/packages/package1&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    package1.DoSomething()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"npm 镜像源地址（官方/淘宝）","date":"2024-06-08T01:22:51.000Z","_content":"\n```shell\n# npm官方镜像源\nregistry=https://registry.npmjs.org\n```\n\n```shell\n# npm淘宝镜像源\nregistry=https://registry.npmmirror.com\n```\n","source":"_posts/npm-镜像源地址（官方-淘宝）.md","raw":"---\ntitle: npm 镜像源地址（官方/淘宝）\ntags:\n  - npm\ncategories:\n  - npm\ndate: 2024-06-08 09:22:51\n---\n\n```shell\n# npm官方镜像源\nregistry=https://registry.npmjs.org\n```\n\n```shell\n# npm淘宝镜像源\nregistry=https://registry.npmmirror.com\n```\n","slug":"npm-镜像源地址（官方-淘宝）","published":1,"updated":"2024-06-08T01:51:38.315Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdy001i2j9kc3fx8msb","content":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm官方镜像源</span></span><br><span class=\"line\">registry=https://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm淘宝镜像源</span></span><br><span class=\"line\">registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n","related_posts":[],"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm官方镜像源</span></span><br><span class=\"line\">registry=https://registry.npmjs.org</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">npm淘宝镜像源</span></span><br><span class=\"line\">registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>\n"},{"title":"前端开发规范梳理:husky/lint-staged/biome/commitlint","date":"2024-06-13T03:18:30.000Z","_content":"\n#### 简介\n\n* [Husky](https://typicode.github.io/husky/)\n* [Lint-Staged](https://github.com/lint-staged/lint-staged)\n* [Biome](https://biomejs.dev/)\n* [Commitlint](https://commitlint.js.org/)\n* [Commizen](https://commitizen.github.io/cz-cli/)\n* [Cz-conventional-changelog](https://github.com/conventional-changelog/conventional-changelog)\n\n#### 规范流程\n\n![](../images/svg/front-standard.svg)\n\n#### 配置流程详情\n\n1. husky\n\n   * 作用：自定义git hooks执行后的事件处理\n\n   * 常用的hook：pre-commit、commit-msg：pre-commit通常与lint-staged搭配使用，校验与格式化git暂存区内容；commit-msg通常与commitlint搭配校验commit msg的格式是否符合规范。\n\n   * .husky/pre-commit hook 文件配置\n\n     ```shell\n     #!/usr/bin/env sh\n     . \"$(dirname \"$0\")/_/husky.sh\"\n     npx lint-staged\n     ```\n\n   * .husky/commit hook 文件配置\n\n     ```shell\n     #!/usr/bin/env sh\n     . \"$(dirname \"$0\")/_/husky.sh\"\n     npx --no-install commitlint --edit \"$1\"\n     ```\n\n2. lint-staged\n\n   * 作用：提交代码前，对暂存区的代码做语法检测以及格式化修复使用，常搭配eslint以及prettier，最新的可以搭配biome，以下都是使用biome\n\n   * 支持的配置文件有多种：可以放在package.json中也可单独使用配置文件，我们都使用单独的`.lintstagedrc.json`文件，保持package.json的整洁，lint-staged搭配biome的配置如下\n\n     ```json\n     {\n      \"*\": [\"biome check --apply --no-errors-on-unmatched --files-ignore-unknown=true\"]\n     }\n     ```\n\n   * eslint+prettier配置方法太繁琐，博主已不再使用\n\n3. commitizen\n\n   * 作用：命令行交互式的方式录入commit-msg：包括 type、scope、subject、short desc、long desc、break change、fix issues等\n\n   * 配置如下：\n\n     ```she\n     # 安装\n     pnpm ad d -D commitizen\n     \n     # 替换 git commit ===> git cz\n     git cz\n     ```\n\n   * commitizen适配器：用与扩展commitizen，咋们使用`cz-conventional-changelog`适配器，常用的还有git-cz、cz-git等\n\n   * `cz-conventional-changelog`在package.json中的配置如下：\n\n     ```json\n     \"config\": {\n         \"commitizen\": {\n           \"path\": \"cz-conventional-changelog\"\n         }\n       }\n     ```\n\n4. commitlint\n\n   * 作用：校验commit msg是否与配置的规范一致\n\n   * 安装：commitlint/cli（必须）、commitlint/config-conventional（可选，该npm包是已经写好的一些lint规则，可以选择不使用自己在commitlint配置文件中自定义规则）\n\n   * 配置如下：我们直接使用默认的`commitlint/config-conventional`规则即可，使用.commitlintrc.json文件配置，也支持其他格式的配置文件，详见官方文档。\n\n     ```json\n     {\n       \"extends\": [\"@commitlint/config-conventional\"]\n     }\n     ```\n\n   * 规范中常用的type-enum配置如下（行业中常用合计11种，也可以定义自己团队的type）：\n\n     |   type   |                          desc                          |\n     | :------: | :----------------------------------------------------: |\n     |   feat   |                       添加新功能                       |\n     |   fix    |                        缺陷修复                        |\n     |   perf   |                     提高性能的改动                     |\n     |   docs   |                      文档内容修改                      |\n     |  style   | 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号 |\n     |  build   |     构造工具的或者外部依赖的改动，例如webpack，npm     |\n     | refactor |                        代码重构                        |\n     |  revert  |                        代码回滚                        |\n     |   test   |                添加测试或者修改现有测试                |\n     |    ci    |              CI（持续集成服务）有关的改动              |\n     |  chore   |                构建过程或辅助工具的变动                |\n\n5. change-log\n\n   * 作用：使用标准的commit msg生成change log\n\n   * 配置（我们使用`conventional-changelog-cli`）：\n\n     ```she\n     # 安装\n     pnpm add -g conventional-changelog-cli\n     ```\n\n     ```she\n     # CHANGELOG.md 生成\n     \n     # 该语句不会覆盖之前的change log，向之前的文件中追加新的change\n     conventional-changelog -p angular -i CHANGELOG.md -s\n     \n     # 第一次生成change log\n     conventional-changelog -p angular -i CHANGELOG.md -s -r 0\n     ```\n\n   * npm pkg version 关联详见[官网](https://www.npmjs.com/package/conventional-changelog-cli)\n","source":"_posts/前端项目开发格式规范（husky-lint-staged-biome-commitlint-commizen-cz-conventional-changelog）.md","raw":"---\ntitle: 前端开发规范梳理:husky/lint-staged/biome/commitlint\ntags:\n  - biome\n  - husky\n  - lint-staged\n  - commitlint\n  - commizen\n  - cz-conventional-changelog\ncategories:\n  - frontend standard\ndate: 2024-06-13 11:18:30\n---\n\n#### 简介\n\n* [Husky](https://typicode.github.io/husky/)\n* [Lint-Staged](https://github.com/lint-staged/lint-staged)\n* [Biome](https://biomejs.dev/)\n* [Commitlint](https://commitlint.js.org/)\n* [Commizen](https://commitizen.github.io/cz-cli/)\n* [Cz-conventional-changelog](https://github.com/conventional-changelog/conventional-changelog)\n\n#### 规范流程\n\n![](../images/svg/front-standard.svg)\n\n#### 配置流程详情\n\n1. husky\n\n   * 作用：自定义git hooks执行后的事件处理\n\n   * 常用的hook：pre-commit、commit-msg：pre-commit通常与lint-staged搭配使用，校验与格式化git暂存区内容；commit-msg通常与commitlint搭配校验commit msg的格式是否符合规范。\n\n   * .husky/pre-commit hook 文件配置\n\n     ```shell\n     #!/usr/bin/env sh\n     . \"$(dirname \"$0\")/_/husky.sh\"\n     npx lint-staged\n     ```\n\n   * .husky/commit hook 文件配置\n\n     ```shell\n     #!/usr/bin/env sh\n     . \"$(dirname \"$0\")/_/husky.sh\"\n     npx --no-install commitlint --edit \"$1\"\n     ```\n\n2. lint-staged\n\n   * 作用：提交代码前，对暂存区的代码做语法检测以及格式化修复使用，常搭配eslint以及prettier，最新的可以搭配biome，以下都是使用biome\n\n   * 支持的配置文件有多种：可以放在package.json中也可单独使用配置文件，我们都使用单独的`.lintstagedrc.json`文件，保持package.json的整洁，lint-staged搭配biome的配置如下\n\n     ```json\n     {\n      \"*\": [\"biome check --apply --no-errors-on-unmatched --files-ignore-unknown=true\"]\n     }\n     ```\n\n   * eslint+prettier配置方法太繁琐，博主已不再使用\n\n3. commitizen\n\n   * 作用：命令行交互式的方式录入commit-msg：包括 type、scope、subject、short desc、long desc、break change、fix issues等\n\n   * 配置如下：\n\n     ```she\n     # 安装\n     pnpm ad d -D commitizen\n     \n     # 替换 git commit ===> git cz\n     git cz\n     ```\n\n   * commitizen适配器：用与扩展commitizen，咋们使用`cz-conventional-changelog`适配器，常用的还有git-cz、cz-git等\n\n   * `cz-conventional-changelog`在package.json中的配置如下：\n\n     ```json\n     \"config\": {\n         \"commitizen\": {\n           \"path\": \"cz-conventional-changelog\"\n         }\n       }\n     ```\n\n4. commitlint\n\n   * 作用：校验commit msg是否与配置的规范一致\n\n   * 安装：commitlint/cli（必须）、commitlint/config-conventional（可选，该npm包是已经写好的一些lint规则，可以选择不使用自己在commitlint配置文件中自定义规则）\n\n   * 配置如下：我们直接使用默认的`commitlint/config-conventional`规则即可，使用.commitlintrc.json文件配置，也支持其他格式的配置文件，详见官方文档。\n\n     ```json\n     {\n       \"extends\": [\"@commitlint/config-conventional\"]\n     }\n     ```\n\n   * 规范中常用的type-enum配置如下（行业中常用合计11种，也可以定义自己团队的type）：\n\n     |   type   |                          desc                          |\n     | :------: | :----------------------------------------------------: |\n     |   feat   |                       添加新功能                       |\n     |   fix    |                        缺陷修复                        |\n     |   perf   |                     提高性能的改动                     |\n     |   docs   |                      文档内容修改                      |\n     |  style   | 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号 |\n     |  build   |     构造工具的或者外部依赖的改动，例如webpack，npm     |\n     | refactor |                        代码重构                        |\n     |  revert  |                        代码回滚                        |\n     |   test   |                添加测试或者修改现有测试                |\n     |    ci    |              CI（持续集成服务）有关的改动              |\n     |  chore   |                构建过程或辅助工具的变动                |\n\n5. change-log\n\n   * 作用：使用标准的commit msg生成change log\n\n   * 配置（我们使用`conventional-changelog-cli`）：\n\n     ```she\n     # 安装\n     pnpm add -g conventional-changelog-cli\n     ```\n\n     ```she\n     # CHANGELOG.md 生成\n     \n     # 该语句不会覆盖之前的change log，向之前的文件中追加新的change\n     conventional-changelog -p angular -i CHANGELOG.md -s\n     \n     # 第一次生成change log\n     conventional-changelog -p angular -i CHANGELOG.md -s -r 0\n     ```\n\n   * npm pkg version 关联详见[官网](https://www.npmjs.com/package/conventional-changelog-cli)\n","slug":"前端项目开发格式规范（husky-lint-staged-biome-commitlint-commizen-cz-conventional-changelog）","published":1,"updated":"2024-06-13T07:48:07.480Z","comments":1,"layout":"post","photos":[],"_id":"clxr8dpdy001m2j9kh95pfb77","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li><a href=\"https://typicode.github.io/husky/\">Husky</a></li>\n<li><a href=\"https://github.com/lint-staged/lint-staged\">Lint-Staged</a></li>\n<li><a href=\"https://biomejs.dev/\">Biome</a></li>\n<li><a href=\"https://commitlint.js.org/\">Commitlint</a></li>\n<li><a href=\"https://commitizen.github.io/cz-cli/\">Commizen</a></li>\n<li><a href=\"https://github.com/conventional-changelog/conventional-changelog\">Cz-conventional-changelog</a></li>\n</ul>\n<h4 id=\"规范流程\"><a href=\"#规范流程\" class=\"headerlink\" title=\"规范流程\"></a>规范流程</h4><p><img data-src=\"/../images/svg/front-standard.svg\"></p>\n<h4 id=\"配置流程详情\"><a href=\"#配置流程详情\" class=\"headerlink\" title=\"配置流程详情\"></a>配置流程详情</h4><ol>\n<li><p>husky</p>\n<ul>\n<li><p>作用：自定义git hooks执行后的事件处理</p>\n</li>\n<li><p>常用的hook：pre-commit、commit-msg：pre-commit通常与lint-staged搭配使用，校验与格式化git暂存区内容；commit-msg通常与commitlint搭配校验commit msg的格式是否符合规范。</p>\n</li>\n<li><p>.husky&#x2F;pre-commit hook 文件配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/env sh</span></span><br><span class=\"line\">. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\">npx lint-staged</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>.husky&#x2F;commit hook 文件配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/env sh</span></span><br><span class=\"line\">. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\">npx --no-install commitlint --edit &quot;$1&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>lint-staged</p>\n<ul>\n<li><p>作用：提交代码前，对暂存区的代码做语法检测以及格式化修复使用，常搭配eslint以及prettier，最新的可以搭配biome，以下都是使用biome</p>\n</li>\n<li><p>支持的配置文件有多种：可以放在package.json中也可单独使用配置文件，我们都使用单独的<code>.lintstagedrc.json</code>文件，保持package.json的整洁，lint-staged搭配biome的配置如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;biome check --apply --no-errors-on-unmatched --files-ignore-unknown=true&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>eslint+prettier配置方法太繁琐，博主已不再使用</p>\n</li>\n</ul>\n</li>\n<li><p>commitizen</p>\n<ul>\n<li><p>作用：命令行交互式的方式录入commit-msg：包括 type、scope、subject、short desc、long desc、break change、fix issues等</p>\n</li>\n<li><p>配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">pnpm ad d -D commitizen</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 git commit ===&gt; git cz</span><br><span class=\"line\">git cz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>commitizen适配器：用与扩展commitizen，咋们使用<code>cz-conventional-changelog</code>适配器，常用的还有git-cz、cz-git等</p>\n</li>\n<li><p><code>cz-conventional-changelog</code>在package.json中的配置如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cz-conventional-changelog&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>commitlint</p>\n<ul>\n<li><p>作用：校验commit msg是否与配置的规范一致</p>\n</li>\n<li><p>安装：commitlint&#x2F;cli（必须）、commitlint&#x2F;config-conventional（可选，该npm包是已经写好的一些lint规则，可以选择不使用自己在commitlint配置文件中自定义规则）</p>\n</li>\n<li><p>配置如下：我们直接使用默认的<code>commitlint/config-conventional</code>规则即可，使用.commitlintrc.json文件配置，也支持其他格式的配置文件，详见官方文档。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;@commitlint/config-conventional&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>规范中常用的type-enum配置如下（行业中常用合计11种，也可以定义自己团队的type）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">feat</td>\n<td align=\"center\">添加新功能</td>\n</tr>\n<tr>\n<td align=\"center\">fix</td>\n<td align=\"center\">缺陷修复</td>\n</tr>\n<tr>\n<td align=\"center\">perf</td>\n<td align=\"center\">提高性能的改动</td>\n</tr>\n<tr>\n<td align=\"center\">docs</td>\n<td align=\"center\">文档内容修改</td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\">不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</td>\n</tr>\n<tr>\n<td align=\"center\">build</td>\n<td align=\"center\">构造工具的或者外部依赖的改动，例如webpack，npm</td>\n</tr>\n<tr>\n<td align=\"center\">refactor</td>\n<td align=\"center\">代码重构</td>\n</tr>\n<tr>\n<td align=\"center\">revert</td>\n<td align=\"center\">代码回滚</td>\n</tr>\n<tr>\n<td align=\"center\">test</td>\n<td align=\"center\">添加测试或者修改现有测试</td>\n</tr>\n<tr>\n<td align=\"center\">ci</td>\n<td align=\"center\">CI（持续集成服务）有关的改动</td>\n</tr>\n<tr>\n<td align=\"center\">chore</td>\n<td align=\"center\">构建过程或辅助工具的变动</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>change-log</p>\n<ul>\n<li><p>作用：使用标准的commit msg生成change log</p>\n</li>\n<li><p>配置（我们使用<code>conventional-changelog-cli</code>）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">pnpm add -g conventional-changelog-cli</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># CHANGELOG.md 生成</span><br><span class=\"line\"></span><br><span class=\"line\"># 该语句不会覆盖之前的change log，向之前的文件中追加新的change</span><br><span class=\"line\">conventional-changelog -p angular -i CHANGELOG.md -s</span><br><span class=\"line\"></span><br><span class=\"line\"># 第一次生成change log</span><br><span class=\"line\">conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>npm pkg version 关联详见<a href=\"https://www.npmjs.com/package/conventional-changelog-cli\">官网</a></p>\n</li>\n</ul>\n</li>\n</ol>\n","related_posts":[],"excerpt":"","more":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li><a href=\"https://typicode.github.io/husky/\">Husky</a></li>\n<li><a href=\"https://github.com/lint-staged/lint-staged\">Lint-Staged</a></li>\n<li><a href=\"https://biomejs.dev/\">Biome</a></li>\n<li><a href=\"https://commitlint.js.org/\">Commitlint</a></li>\n<li><a href=\"https://commitizen.github.io/cz-cli/\">Commizen</a></li>\n<li><a href=\"https://github.com/conventional-changelog/conventional-changelog\">Cz-conventional-changelog</a></li>\n</ul>\n<h4 id=\"规范流程\"><a href=\"#规范流程\" class=\"headerlink\" title=\"规范流程\"></a>规范流程</h4><p><img data-src=\"/../images/svg/front-standard.svg\"></p>\n<h4 id=\"配置流程详情\"><a href=\"#配置流程详情\" class=\"headerlink\" title=\"配置流程详情\"></a>配置流程详情</h4><ol>\n<li><p>husky</p>\n<ul>\n<li><p>作用：自定义git hooks执行后的事件处理</p>\n</li>\n<li><p>常用的hook：pre-commit、commit-msg：pre-commit通常与lint-staged搭配使用，校验与格式化git暂存区内容；commit-msg通常与commitlint搭配校验commit msg的格式是否符合规范。</p>\n</li>\n<li><p>.husky&#x2F;pre-commit hook 文件配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/env sh</span></span><br><span class=\"line\">. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\">npx lint-staged</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>.husky&#x2F;commit hook 文件配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/env sh</span></span><br><span class=\"line\">. &quot;$(dirname &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class=\"line\">npx --no-install commitlint --edit &quot;$1&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>lint-staged</p>\n<ul>\n<li><p>作用：提交代码前，对暂存区的代码做语法检测以及格式化修复使用，常搭配eslint以及prettier，最新的可以搭配biome，以下都是使用biome</p>\n</li>\n<li><p>支持的配置文件有多种：可以放在package.json中也可单独使用配置文件，我们都使用单独的<code>.lintstagedrc.json</code>文件，保持package.json的整洁，lint-staged搭配biome的配置如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;biome check --apply --no-errors-on-unmatched --files-ignore-unknown=true&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>eslint+prettier配置方法太繁琐，博主已不再使用</p>\n</li>\n</ul>\n</li>\n<li><p>commitizen</p>\n<ul>\n<li><p>作用：命令行交互式的方式录入commit-msg：包括 type、scope、subject、short desc、long desc、break change、fix issues等</p>\n</li>\n<li><p>配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">pnpm ad d -D commitizen</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换 git commit ===&gt; git cz</span><br><span class=\"line\">git cz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>commitizen适配器：用与扩展commitizen，咋们使用<code>cz-conventional-changelog</code>适配器，常用的还有git-cz、cz-git等</p>\n</li>\n<li><p><code>cz-conventional-changelog</code>在package.json中的配置如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cz-conventional-changelog&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>commitlint</p>\n<ul>\n<li><p>作用：校验commit msg是否与配置的规范一致</p>\n</li>\n<li><p>安装：commitlint&#x2F;cli（必须）、commitlint&#x2F;config-conventional（可选，该npm包是已经写好的一些lint规则，可以选择不使用自己在commitlint配置文件中自定义规则）</p>\n</li>\n<li><p>配置如下：我们直接使用默认的<code>commitlint/config-conventional</code>规则即可，使用.commitlintrc.json文件配置，也支持其他格式的配置文件，详见官方文档。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;@commitlint/config-conventional&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>规范中常用的type-enum配置如下（行业中常用合计11种，也可以定义自己团队的type）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">type</th>\n<th align=\"center\">desc</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">feat</td>\n<td align=\"center\">添加新功能</td>\n</tr>\n<tr>\n<td align=\"center\">fix</td>\n<td align=\"center\">缺陷修复</td>\n</tr>\n<tr>\n<td align=\"center\">perf</td>\n<td align=\"center\">提高性能的改动</td>\n</tr>\n<tr>\n<td align=\"center\">docs</td>\n<td align=\"center\">文档内容修改</td>\n</tr>\n<tr>\n<td align=\"center\">style</td>\n<td align=\"center\">不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</td>\n</tr>\n<tr>\n<td align=\"center\">build</td>\n<td align=\"center\">构造工具的或者外部依赖的改动，例如webpack，npm</td>\n</tr>\n<tr>\n<td align=\"center\">refactor</td>\n<td align=\"center\">代码重构</td>\n</tr>\n<tr>\n<td align=\"center\">revert</td>\n<td align=\"center\">代码回滚</td>\n</tr>\n<tr>\n<td align=\"center\">test</td>\n<td align=\"center\">添加测试或者修改现有测试</td>\n</tr>\n<tr>\n<td align=\"center\">ci</td>\n<td align=\"center\">CI（持续集成服务）有关的改动</td>\n</tr>\n<tr>\n<td align=\"center\">chore</td>\n<td align=\"center\">构建过程或辅助工具的变动</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>change-log</p>\n<ul>\n<li><p>作用：使用标准的commit msg生成change log</p>\n</li>\n<li><p>配置（我们使用<code>conventional-changelog-cli</code>）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安装</span><br><span class=\"line\">pnpm add -g conventional-changelog-cli</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># CHANGELOG.md 生成</span><br><span class=\"line\"></span><br><span class=\"line\"># 该语句不会覆盖之前的change log，向之前的文件中追加新的change</span><br><span class=\"line\">conventional-changelog -p angular -i CHANGELOG.md -s</span><br><span class=\"line\"></span><br><span class=\"line\"># 第一次生成change log</span><br><span class=\"line\">conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>npm pkg version 关联详见<a href=\"https://www.npmjs.com/package/conventional-changelog-cli\">官网</a></p>\n</li>\n</ul>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clxr8dpdm00012j9kdnrn5xq6","category_id":"clxr8dpdo00042j9kga3yduwn","_id":"clxr8dpdr000f2j9kel27132u"},{"post_id":"clxr8dpdn00032j9kh4xu88y8","category_id":"clxr8dpdq000b2j9kcc3j2w7o","_id":"clxr8dpdr000i2j9kf56m7zbs"},{"post_id":"clxr8dpdp00092j9k0zyudly7","category_id":"clxr8dpdr000j2j9k2ume1v55","_id":"clxr8dpds000q2j9kgrvegru1"},{"post_id":"clxr8dpdq000a2j9kgeuc678z","category_id":"clxr8dpdr000g2j9k1fsbbzvi","_id":"clxr8dpds000s2j9kfy9zg5og"},{"post_id":"clxr8dpdr000e2j9kdwt7h9yy","category_id":"clxr8dpds000p2j9k4ms5cbxg","_id":"clxr8dpdt000v2j9k293l3oua"},{"post_id":"clxr8dpdp00072j9k7pn6904i","category_id":"clxr8dpdr000g2j9k1fsbbzvi","_id":"clxr8dpdt000x2j9k4nfj575l"},{"post_id":"clxr8dpdp00072j9k7pn6904i","category_id":"clxr8dpdt000t2j9kdvly6ro7","_id":"clxr8dpdt000z2j9k7cvu1waq"},{"post_id":"clxr8dpdx001g2j9ke7jfgxtl","category_id":"clxr8dpdq000b2j9kcc3j2w7o","_id":"clxr8dpdy001n2j9k9umjfz24"},{"post_id":"clxr8dpdx001h2j9ka8ciex5f","category_id":"clxr8dpdr000g2j9k1fsbbzvi","_id":"clxr8dpdz001o2j9kacfo79bo"},{"post_id":"clxr8dpdw001c2j9k7c9if02k","category_id":"clxr8dpdx001e2j9kax9fdpk8","_id":"clxr8dpdz001r2j9k2rdb2y72"},{"post_id":"clxr8dpdx001d2j9kauederrd","category_id":"clxr8dpdy001j2j9k3brf4g0k","_id":"clxr8dpdz001v2j9k61nr2umf"},{"post_id":"clxr8dpdy001i2j9kc3fx8msb","category_id":"clxr8dpdy001j2j9k3brf4g0k","_id":"clxr8dpdz001y2j9k2mumaj2i"},{"post_id":"clxr8dpdy001m2j9kh95pfb77","category_id":"clxr8dpdz001u2j9kdwjz23tw","_id":"clxr8dpdz00212j9k7jnf572t"}],"PostTag":[{"post_id":"clxr8dpdm00012j9kdnrn5xq6","tag_id":"clxr8dpdp00052j9kcfmn39iy","_id":"clxr8dpdr000d2j9kht672cdz"},{"post_id":"clxr8dpdn00032j9kh4xu88y8","tag_id":"clxr8dpdq000c2j9k2xeu3p1x","_id":"clxr8dpds000l2j9k0lpi3523"},{"post_id":"clxr8dpdn00032j9kh4xu88y8","tag_id":"clxr8dpdr000h2j9k2usp6vo6","_id":"clxr8dpds000m2j9kge70bhwy"},{"post_id":"clxr8dpdp00072j9k7pn6904i","tag_id":"clxr8dpdr000k2j9kdlyn86dy","_id":"clxr8dpdt00102j9kfvdv57jn"},{"post_id":"clxr8dpdp00072j9k7pn6904i","tag_id":"clxr8dpds000o2j9kc99q5oix","_id":"clxr8dpdt00112j9k3okifiq5"},{"post_id":"clxr8dpdp00072j9k7pn6904i","tag_id":"clxr8dpds000r2j9k3rvlh7py","_id":"clxr8dpdt00132j9k9jy7b7jc"},{"post_id":"clxr8dpdp00072j9k7pn6904i","tag_id":"clxr8dpdt000u2j9k5dh3ha6n","_id":"clxr8dpdt00142j9k1an6exue"},{"post_id":"clxr8dpdp00072j9k7pn6904i","tag_id":"clxr8dpdt000w2j9k5zoth575","_id":"clxr8dpdt00162j9k43mt34fx"},{"post_id":"clxr8dpdp00092j9k0zyudly7","tag_id":"clxr8dpdt000y2j9kh7ww1vja","_id":"clxr8dpdt00172j9kf23adn2r"},{"post_id":"clxr8dpdp00092j9k0zyudly7","tag_id":"clxr8dpdt00122j9khvnh4s1q","_id":"clxr8dpdt00192j9keprd54lk"},{"post_id":"clxr8dpdq000a2j9kgeuc678z","tag_id":"clxr8dpdr000k2j9kdlyn86dy","_id":"clxr8dpdt001a2j9k9128g1fr"},{"post_id":"clxr8dpdr000e2j9kdwt7h9yy","tag_id":"clxr8dpdt00182j9k3qcb5iqs","_id":"clxr8dpdt001b2j9kax7w3504"},{"post_id":"clxr8dpdx001h2j9ka8ciex5f","tag_id":"clxr8dpdr000k2j9kdlyn86dy","_id":"clxr8dpdy001l2j9k741mb8z4"},{"post_id":"clxr8dpdw001c2j9k7c9if02k","tag_id":"clxr8dpdr000h2j9k2usp6vo6","_id":"clxr8dpdz001s2j9kfe6s4ewa"},{"post_id":"clxr8dpdw001c2j9k7c9if02k","tag_id":"clxr8dpdx001f2j9kax8768ey","_id":"clxr8dpdz001t2j9kapxv4piz"},{"post_id":"clxr8dpdw001c2j9k7c9if02k","tag_id":"clxr8dpdy001k2j9k8sd1bipm","_id":"clxr8dpdz001x2j9k4y92awdy"},{"post_id":"clxr8dpdx001d2j9kauederrd","tag_id":"clxr8dpdz001q2j9k3mae4fkn","_id":"clxr8dpdz00202j9k5xl5e1fp"},{"post_id":"clxr8dpdx001d2j9kauederrd","tag_id":"clxr8dpdz001w2j9kfsleg231","_id":"clxr8dpdz00222j9k910ggi9q"},{"post_id":"clxr8dpdx001g2j9ke7jfgxtl","tag_id":"clxr8dpdx001f2j9kax8768ey","_id":"clxr8dpe000252j9keirvgder"},{"post_id":"clxr8dpdx001g2j9ke7jfgxtl","tag_id":"clxr8dpdy001k2j9k8sd1bipm","_id":"clxr8dpe000262j9k357w8doh"},{"post_id":"clxr8dpdy001i2j9kc3fx8msb","tag_id":"clxr8dpdz001w2j9kfsleg231","_id":"clxr8dpe000282j9k14a9cn2p"},{"post_id":"clxr8dpdy001m2j9kh95pfb77","tag_id":"clxr8dpe000272j9kewtk7gis","_id":"clxr8dpe0002e2j9k4hi90fgw"},{"post_id":"clxr8dpdy001m2j9kh95pfb77","tag_id":"clxr8dpe000292j9kdifoa1ow","_id":"clxr8dpe0002f2j9k40iwcc8y"},{"post_id":"clxr8dpdy001m2j9kh95pfb77","tag_id":"clxr8dpe0002a2j9kc8hm5yvr","_id":"clxr8dpe0002g2j9k6wzub56b"},{"post_id":"clxr8dpdy001m2j9kh95pfb77","tag_id":"clxr8dpe0002b2j9k2n340vgc","_id":"clxr8dpe0002h2j9k4zz13het"},{"post_id":"clxr8dpdy001m2j9kh95pfb77","tag_id":"clxr8dpe0002c2j9k24b2d8ex","_id":"clxr8dpe0002i2j9k9frx78tx"},{"post_id":"clxr8dpdy001m2j9kh95pfb77","tag_id":"clxr8dpe0002d2j9k7rgmfxye","_id":"clxr8dpe0002j2j9k7bcy04hx"}],"Tag":[{"name":"css","_id":"clxr8dpdp00052j9kcfmn39iy"},{"name":"nginx","_id":"clxr8dpdq000c2j9k2xeu3p1x"},{"name":"docker","_id":"clxr8dpdr000h2j9k2usp6vo6"},{"name":"go","_id":"clxr8dpdr000k2j9kdlyn86dy"},{"name":"gin","_id":"clxr8dpds000o2j9kc99q5oix"},{"name":"swagger","_id":"clxr8dpds000r2j9k3rvlh7py"},{"name":"next","_id":"clxr8dpdt000u2j9k5dh3ha6n"},{"name":"openapi-generator","_id":"clxr8dpdt000w2j9k5zoth575"},{"name":"hexo","_id":"clxr8dpdt000y2j9kh7ww1vja"},{"name":"plugins","_id":"clxr8dpdt00122j9khvnh4s1q"},{"name":"editor","_id":"clxr8dpdt00182j9k3qcb5iqs"},{"name":"linux","_id":"clxr8dpdx001f2j9kax8768ey"},{"name":"ubuntu","_id":"clxr8dpdy001k2j9k8sd1bipm"},{"name":"yalc","_id":"clxr8dpdz001q2j9k3mae4fkn"},{"name":"npm","_id":"clxr8dpdz001w2j9kfsleg231"},{"name":"biome","_id":"clxr8dpe000272j9kewtk7gis"},{"name":"husky","_id":"clxr8dpe000292j9kdifoa1ow"},{"name":"lint-staged","_id":"clxr8dpe0002a2j9kc8hm5yvr"},{"name":"commitlint","_id":"clxr8dpe0002b2j9k2n340vgc"},{"name":"commizen","_id":"clxr8dpe0002c2j9k24b2d8ex"},{"name":"cz-conventional-changelog","_id":"clxr8dpe0002d2j9k7rgmfxye"}]}}